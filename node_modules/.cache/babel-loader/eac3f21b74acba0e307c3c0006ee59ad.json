{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/util/demo/dict-classic.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/util/demo/dict-classic.vue","mtime":1675244276658},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getList, remove, update, add, getDict, getDictTree } from \"@/api/system/dict\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      selectionList: [],\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        tree: true,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        menuWidth: 300,\n        dialogWidth: 880,\n        column: [{\n          label: \"字典编号\",\n          prop: \"code\",\n          search: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入字典编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典名称\",\n          prop: \"dictValue\",\n          search: true,\n          align: \"center\",\n          rules: [{\n            required: true,\n            message: \"请输入字典名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"上级字典\",\n          prop: \"parentId\",\n          type: \"tree\",\n          dicData: [],\n          hide: true,\n          props: {\n            label: \"title\"\n          },\n          rules: [{\n            required: false,\n            message: \"请选择上级字典\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"字典键值\",\n          prop: \"dictKey\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典键值\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典排序\",\n          prop: \"sort\",\n          type: \"number\",\n          rules: [{\n            required: true,\n            message: \"请输入字典排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"封存\",\n          prop: \"isSealed\",\n          type: \"select\",\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择封存\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"字典备注\",\n          prop: \"remark\",\n          search: true,\n          hide: true\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.dict_add, false),\n        viewBtn: this.vaildData(this.permission.dict_view, false),\n        delBtn: this.vaildData(this.permission.dict_delete, false),\n        editBtn: this.vaildData(this.permission.dict_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n    getDictTree().then(function (res) {\n      var column = _this.findObject(_this.optionChild.column, \"parentId\");\n      column.dicData = res.data.data;\n    });\n  },\n  methods: {\n    handleAdd: function handleAdd(row) {\n      this.$refs.crud.value.code = row.code;\n      this.$refs.crud.value.parentId = row.id;\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"code\") {\n          item.value = row.code;\n          item.addDisabled = true;\n        }\n        if (item.prop === \"parentId\") {\n          item.value = row.id;\n          item.addDisabled = true;\n        }\n      });\n      this.$refs.crud.rowAdd();\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n      add(row).then(function () {\n        _this2.onLoad(_this2.page);\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n      update(row).then(function () {\n        _this3.onLoad(_this3.page);\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this4 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this5.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this6 = this;\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDict(this.form.id).then(function (res) {\n          _this6.form = res.data.data;\n        });\n      }\n      done();\n    },\n    beforeClose: function beforeClose(done) {\n      this.$refs.crud.tableForm = {};\n      this.$refs.crud.value.code = \"\";\n      this.$refs.crud.value.parentId = \"\";\n      this.$refs.crud.value.addDisabled = false;\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"code\") {\n          item.value = \"\";\n          item.addDisabled = false;\n        }\n        if (item.prop === \"parentId\") {\n          item.value = \"\";\n          item.addDisabled = false;\n        }\n      });\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this7 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        _this7.data = res.data.data;\n        _this7.loading = false;\n        _this7.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;AAkDA,SACAA,SACAC,QACAC,QACAC,KACAC,SACAC,mBACA;AACA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACAC;UACAC;UACAC;UACAC;UACAC,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAC;UACAM;UACAJ,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAQ;UACAC;UACAC;UACAC;YACAZ;UACA;UACAI,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAQ;UACAL,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAQ;UACAL,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAQ;UACAC,UACA;YACAV;YACAa;UACA,GACA;YACAb;YACAa;UACA,EACA;UACAC;UACAV,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAP;UACAC;UACAC;UACAS;QACA;MAEA;MACAhC;IACA;EACA;EACAoC,0CACAC;IACAC;MACA;QACAC;QACAtB;QACAuB;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAA;MACA;MACA;IACA;EAAA,EACA;EACAC;IAAA;IACA5C;MACA;MACAqB;IACA;EACA;EACAwB;IACAC;MACA;MACA;MACA;QACA;UACAC;UACAA;QACA;QACA;UACAA;UACAA;QACA;MACA;MACA;IACA;IACAC;MAAA;MACAlD;QACA;QACA;UACAiC;UACAH;QACA;QACAqB;MACA;QACAC;QACA7C;MACA;IACA;IACA8C;MAAA;MACAtD;QACA;QACA;UACAkC;UACAH;QACA;QACAqB;MACA;QACAC;QACA7C;MACA;IACA;IACA+C;MAAA;MACA;QACAC;QACAC;QACAvB;MACA,GACAwB;QACA;MACA,GACAA;QACA;QACA;UACAxB;UACAH;QACA;MACA;IACA;IACA4B;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACAR;IACA;IACAS;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;QACA;QACA;MACA;MACA;QACAP;QACAC;QACAvB;MACA,GACAwB;QACA;MACA,GACAA;QACA;QACA;UACAxB;UACAH;QACA;QACA;MACA;IACA;IACAiC;MAAA;MACA;QACA9D;UACA;QACA;MACA;MACAkD;IACA;IACAa;MACA;MACA;MACA;MACA;MACA;QACA;UACAf;UACAA;QACA;QACA;UACAA;UACAA;QACA;MACA;MACAE;IACA;IACAc;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAvE,QACAW,kBACAA,eACA6D,kCACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["getList","remove","update","add","getDict","getDictTree","data","form","selectionList","query","loading","page","pageSize","currentPage","total","option","tip","searchShow","searchMenuSpan","tree","border","index","selection","viewBtn","menuWidth","dialogWidth","column","label","prop","search","span","rules","required","message","trigger","align","type","dicData","hide","props","value","slot","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","mounted","methods","handleAdd","item","rowSave","done","window","rowUpdate","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","selectionChange","selectionClear","handleDelete","beforeOpen","beforeClose","currentChange","sizeChange","refreshChange","onLoad","Object"],"sourceRoot":"src/views/util/demo","sources":["dict-classic.vue"],"sourcesContent":["<template>\r\n  <basic-container>\r\n    <avue-crud\r\n      :option=\"option\"\r\n      :table-loading=\"loading\"\r\n      :data=\"data\"\r\n      ref=\"crud\"\r\n      v-model=\"form\"\r\n      :permission=\"permissionList\"\r\n      :before-open=\"beforeOpen\"\r\n      :before-close=\"beforeClose\"\r\n      @row-del=\"rowDel\"\r\n      @row-update=\"rowUpdate\"\r\n      @row-save=\"rowSave\"\r\n      @search-change=\"searchChange\"\r\n      @search-reset=\"searchReset\"\r\n      @selection-change=\"selectionChange\"\r\n      @current-change=\"currentChange\"\r\n      @size-change=\"sizeChange\"\r\n      @refresh-change=\"refreshChange\"\r\n      @on-load=\"onLoad\"\r\n    >\r\n      <template slot=\"menuLeft\">\r\n        <el-button\r\n          type=\"danger\"\r\n          size=\"small\"\r\n          icon=\"el-icon-delete\"\r\n          v-if=\"permission.dict_delete\"\r\n          plain\r\n          @click=\"handleDelete\"\r\n        >删 除\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"{row}\" slot=\"isSealed\">\r\n        <el-tag>{{row.isSealed===0?'否':'是'}}</el-tag>\r\n      </template>\r\n      <template slot-scope=\"scope\" slot=\"menu\">\r\n        <el-button\r\n          type=\"text\"\r\n          icon=\"el-icon-check\"\r\n          size=\"small\"\r\n          @click.stop=\"handleAdd(scope.row,scope.index)\"\r\n        >新增子项\r\n        </el-button>\r\n      </template>\r\n    </avue-crud>\r\n  </basic-container>\r\n</template>\r\n\r\n<script>\r\n  import {\r\n    getList,\r\n    remove,\r\n    update,\r\n    add,\r\n    getDict,\r\n    getDictTree\r\n  } from \"@/api/system/dict\";\r\n  import {mapGetters} from \"vuex\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {},\r\n        selectionList: [],\r\n        query: {},\r\n        loading: true,\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        option: {\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          tree: true,\r\n          border: true,\r\n          index: true,\r\n          selection: true,\r\n          viewBtn: true,\r\n          menuWidth: 300,\r\n          dialogWidth: 880,\r\n          column: [\r\n            {\r\n              label: \"字典编号\",\r\n              prop: \"code\",\r\n              search: true,\r\n              span: 24,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入字典编号\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"字典名称\",\r\n              prop: \"dictValue\",\r\n              search: true,\r\n              align: \"center\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入字典名称\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"上级字典\",\r\n              prop: \"parentId\",\r\n              type: \"tree\",\r\n              dicData: [],\r\n              hide: true,\r\n              props: {\r\n                label: \"title\"\r\n              },\r\n              rules: [\r\n                {\r\n                  required: false,\r\n                  message: \"请选择上级字典\",\r\n                  trigger: \"click\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"字典键值\",\r\n              prop: \"dictKey\",\r\n              type: \"number\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入字典键值\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"字典排序\",\r\n              prop: \"sort\",\r\n              type: \"number\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入字典排序\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"封存\",\r\n              prop: \"isSealed\",\r\n              type: \"select\",\r\n              dicData: [\r\n                {\r\n                  label: \"否\",\r\n                  value: 0\r\n                },\r\n                {\r\n                  label: \"是\",\r\n                  value: 1\r\n                }\r\n              ],\r\n              slot: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请选择封存\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"字典备注\",\r\n              prop: \"remark\",\r\n              search: true,\r\n              hide: true\r\n            }\r\n          ]\r\n        },\r\n        data: []\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"permission\"]),\r\n      permissionList() {\r\n        return {\r\n          addBtn: this.vaildData(this.permission.dict_add, false),\r\n          viewBtn: this.vaildData(this.permission.dict_view, false),\r\n          delBtn: this.vaildData(this.permission.dict_delete, false),\r\n          editBtn: this.vaildData(this.permission.dict_edit, false)\r\n        };\r\n      },\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      }\r\n    },\r\n    mounted() {\r\n      getDictTree().then(res => {\r\n        const column = this.findObject(this.optionChild.column, \"parentId\");\r\n        column.dicData = res.data.data;\r\n      });\r\n    },\r\n    methods: {\r\n      handleAdd(row) {\r\n        this.$refs.crud.value.code = row.code;\r\n        this.$refs.crud.value.parentId = row.id;\r\n        this.$refs.crud.option.column.filter(item => {\r\n          if (item.prop === \"code\") {\r\n            item.value = row.code;\r\n            item.addDisabled = true;\r\n          }\r\n          if (item.prop === \"parentId\") {\r\n            item.value = row.id;\r\n            item.addDisabled = true;\r\n          }\r\n        });\r\n        this.$refs.crud.rowAdd();\r\n      },\r\n      rowSave(row, done, loading) {\r\n        add(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowUpdate(row, index, done, loading) {\r\n        update(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowDel(row) {\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(row.id);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      searchReset() {\r\n        this.query = {};\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      handleDelete() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            this.$refs.crud.toggleSelection();\r\n          });\r\n      },\r\n      beforeOpen(done, type) {\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getDict(this.form.id).then(res => {\r\n            this.form = res.data.data;\r\n          });\r\n        }\r\n        done();\r\n      },\r\n      beforeClose(done) {\r\n        this.$refs.crud.tableForm = {};\r\n        this.$refs.crud.value.code = \"\";\r\n        this.$refs.crud.value.parentId = \"\";\r\n        this.$refs.crud.value.addDisabled = false;\r\n        this.$refs.crud.option.column.filter(item => {\r\n          if (item.prop === \"code\") {\r\n            item.value = \"\";\r\n            item.addDisabled = false;\r\n          }\r\n          if (item.prop === \"parentId\") {\r\n            item.value = \"\";\r\n            item.addDisabled = false;\r\n          }\r\n        });\r\n        done();\r\n      },\r\n      currentChange(currentPage) {\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize) {\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        this.loading = true;\r\n        getList(\r\n          page.currentPage,\r\n          page.pageSize,\r\n          Object.assign(params, this.query)\r\n        ).then(res => {\r\n          this.data = res.data.data;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}