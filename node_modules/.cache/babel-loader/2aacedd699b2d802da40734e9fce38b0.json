{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/eslint-loader/index.js??ref--13-0!/Users/shiliangliang/6cloud/saber/src/router/avue-router.js","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/router/avue-router.js","mtime":1675244276611},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/eslint-loader/index.js","mtime":1676864063827}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nvar RouterPlugin = function RouterPlugin() {\n  this.$router = null;\n  this.$store = null;\n};\nRouterPlugin.install = function (vue) {\n  var _this = this;\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  this.$router = option.router;\n  this.$store = option.store;\n  this.$vue = new vue({\n    i18n: option.i18n\n  });\n\n  // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\n  function isURL(s) {\n    if (s.includes('html')) return true;\n    return /^http[s]?:\\/\\/.*/.test(s);\n  }\n\n  // 将参数处理为参数的形式拼接\n  function objToform(obj) {\n    var result = [];\n    Object.keys(obj).forEach(function (ele) {\n      result.push(\"\".concat(ele, \"=\").concat(obj[ele]));\n    });\n    return result.join('&');\n  }\n  this.$router.$avueRouter = {\n    //全局配置\n    $website: this.$store.getters.website,\n    group: '',\n    meta: {},\n    safe: this,\n    // 设置标题\n    setTitle: function setTitle(title) {\n      var defaultTitle = _this.$vue.$t('title');\n      title = title ? \"\".concat(title, \"-\").concat(defaultTitle) : defaultTitle;\n      document.title = title;\n    },\n    closeTag: function closeTag(value) {\n      var tag = value || _this.$store.getters.tag;\n      if (typeof value === 'string') {\n        tag = _this.$store.getters.tagList.filter(function (ele) {\n          return ele.value === value;\n        })[0];\n      }\n      _this.$store.commit('DEL_TAG', tag);\n    },\n    generateTitle: function generateTitle(title, key) {\n      if (!key) return title;\n      var hasKey = _this.$vue.$te('route.' + key);\n      if (hasKey) {\n        // $t :this method from vue-i18n, inject in @/lang/index.js\n        var translatedTitle = _this.$vue.$t('route.' + key);\n        return translatedTitle;\n      }\n      return title;\n    },\n    //处理路由\n    getPath: function getPath(params) {\n      var src = params.src;\n      var result = src || '/';\n      if (isURL(src)) {\n        result = \"/myiframe/urlPath?\".concat(objToform(params));\n      }\n      return result;\n    },\n    //正则处理路由\n    vaildPath: function vaildPath(list, path) {\n      var result = false;\n      list.forEach(function (ele) {\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\n          result = true;\n        }\n      });\n      return result;\n    },\n    //设置路由值\n    getValue: function getValue(route) {\n      var value = \"\";\n      if (route.query.src) {\n        value = route.query.src;\n      } else {\n        value = route.path;\n      }\n      return value;\n    },\n    //动态路由\n    // 路由是专门的一个接口获取\n    /**\r\n     * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\r\n     * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\r\n    */\n    formatRoutes: function formatRoutes() {\n      var _this2 = this;\n      var aMenu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var first = arguments.length > 1 ? arguments[1] : undefined;\n      // window.console.log('aMenu')\n      // window.console.log(aMenu)\n      var aRouter = [];\n      // 获取到全局配置中的 props\n      var propsConfig = this.$website.menu.props;\n      // 设置 props默认值 作用就是将字段设置成配置的\n      var propsDefault = {\n        label: propsConfig.label || 'name',\n        path: propsConfig.path || 'path',\n        icon: propsConfig.icon || 'icon',\n        children: propsConfig.children || 'children',\n        meta: propsConfig.meta || 'meta'\n      };\n      // 如果没有权限菜单就结束\n      if (aMenu.length === 0) return;\n      // 开始处理menu\n      var _loop = function _loop() {\n        // 取到当前要处理的一项\n        var oMenu = aMenu[i];\n        // 这一块的赋值 也就是取到返回的值\n        var path = function () {\n            if (first) {\n              // 将 '/index' 替换为 ''\n              return oMenu[propsDefault.path].replace('/index', '');\n            } else {\n              return oMenu[propsDefault.path];\n            }\n          }(),\n          //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\n          _component = 'views' + oMenu.path,\n          name = oMenu[propsDefault.label],\n          icon = oMenu[propsDefault.icon],\n          children = oMenu[propsDefault.children],\n          meta = oMenu[propsDefault.meta] || {};\n        // meta中 keepalive 的处理\n        meta = Object.assign(meta, function () {\n          if (option.keepAlive === true) {\n            return {\n              keepAlive: true\n            };\n          }\n        }());\n        //是否有子路由\n        var isChild = children.length !== 0;\n        var oRouter = {\n          path: path,\n          component: function component(resolve) {\n            // 判断是否为首路由\n            if (first) {\n              require(['../page/index'], resolve);\n              return;\n              // 判断是否为多层路由\n            } else if (isChild && !first) {\n              require(['../page/index/layout'], resolve);\n              return;\n              // 判断是否为最终的页面视图\n            } else {\n              require([\"../\".concat(_component, \".vue\")], resolve);\n            }\n          },\n          name: name,\n          icon: icon,\n          meta: meta,\n          redirect: function () {\n            // 第一次进来但是没有子路由的 需要添加redirect\n            if (!isChild && first && !isURL(path)) return \"\".concat(path, \"/index\");else return '';\n          }(),\n          // 整理子路由的route 配置\n          // 处理是否为一级路由\n          children: !isChild ? function () {\n            if (first) {\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\n              if (!isURL(path)) oMenu[propsDefault.path] = \"\".concat(path, \"/index\");\n              return [{\n                component: function component(resolve) {\n                  require([\"../\".concat(_component, \".vue\")], resolve);\n                },\n                icon: icon,\n                name: name,\n                meta: meta,\n                path: 'index'\n              }];\n            }\n            return [];\n          }() : function () {\n            /**\r\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\r\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\r\n            */\n            return _this2.formatRoutes(children, false);\n          }()\n        };\n        aRouter.push(oRouter);\n      };\n      for (var i = 0; i < aMenu.length; i++) {\n        _loop();\n      }\n      // for循环结束\n      // 这个first 卡的其实就是首路由\n      if (first) {\n        this.safe.$router.addRoutes(aRouter);\n      } else {\n        // 这里返回的是子组件\n        return aRouter;\n      }\n    }\n  };\n};\nexport default RouterPlugin;",{"version":3,"names":["RouterPlugin","$router","$store","install","vue","option","router","store","$vue","i18n","isURL","s","includes","test","objToform","obj","result","Object","keys","forEach","ele","push","join","$avueRouter","$website","getters","website","group","meta","safe","setTitle","title","defaultTitle","$t","document","closeTag","value","tag","tagList","filter","commit","generateTitle","key","hasKey","$te","translatedTitle","getPath","params","src","vaildPath","list","path","RegExp","getValue","route","query","formatRoutes","aMenu","first","aRouter","propsConfig","menu","props","propsDefault","label","icon","children","length","oMenu","i","replace","component","name","assign","keepAlive","isChild","oRouter","resolve","require","redirect","addRoutes"],"sources":["/Users/shiliangliang/6cloud/saber/src/router/avue-router.js"],"sourcesContent":["let RouterPlugin = function () {\r\n  this.$router = null;\r\n  this.$store = null;\r\n\r\n};\r\nRouterPlugin.install = function (vue, option = {}) {\r\n  this.$router = option.router;\r\n  this.$store = option.store;\r\n  this.$vue = new vue({ i18n: option.i18n });\r\n\r\n  // 这个的作用是 为了检查出网页链接，因为本项目用到了 iframe\r\n  function isURL(s) {\r\n    if (s.includes('html')) return true;\r\n    return /^http[s]?:\\/\\/.*/.test(s)\r\n  }\r\n\r\n  // 将参数处理为参数的形式拼接\r\n  function objToform(obj) {\r\n    let result = [];\r\n    Object.keys(obj).forEach(ele => {\r\n      result.push(`${ele}=${obj[ele]}`);\r\n    })\r\n    return result.join('&');\r\n  }\r\n\r\n  this.$router.$avueRouter = {\r\n    //全局配置\r\n    $website: this.$store.getters.website,\r\n    group: '',\r\n    meta: {},\r\n    safe: this,\r\n    // 设置标题\r\n    setTitle: (title) => {\r\n      const defaultTitle = this.$vue.$t('title');\r\n      title = title ? `${title}-${defaultTitle}` : defaultTitle;\r\n      document.title = title;\r\n    },\r\n    closeTag: (value) => {\r\n      let tag = value || this.$store.getters.tag;\r\n      if (typeof value === 'string') {\r\n        tag = this.$store.getters.tagList.filter(ele => ele.value === value)[0]\r\n      }\r\n      this.$store.commit('DEL_TAG', tag)\r\n    },\r\n    generateTitle: (title, key) => {\r\n      if (!key) return title;\r\n      const hasKey = this.$vue.$te('route.' + key)\r\n      if (hasKey) {\r\n        // $t :this method from vue-i18n, inject in @/lang/index.js\r\n        const translatedTitle = this.$vue.$t('route.' + key)\r\n\r\n        return translatedTitle\r\n      }\r\n      return title\r\n    },\r\n    //处理路由\r\n    getPath: function (params) {\r\n      let {src} = params;\r\n      let result = src || '/';\r\n      if (isURL(src)) {\r\n        result = `/myiframe/urlPath?${objToform(params)}`;\r\n      }\r\n      return result;\r\n    },\r\n    //正则处理路由\r\n    vaildPath: function (list, path) {\r\n      let result = false;\r\n      list.forEach(ele => {\r\n        if (new RegExp(\"^\" + ele + \".*\", \"g\").test(path)) {\r\n          result = true\r\n        }\r\n\r\n      })\r\n      return result;\r\n    },\r\n    //设置路由值\r\n    getValue: function (route) {\r\n      let value = \"\";\r\n      if (route.query.src) {\r\n        value = route.query.src;\r\n      } else {\r\n        value = route.path;\r\n      }\r\n      return value;\r\n    },\r\n    //动态路由\r\n    // 路由是专门的一个接口获取\r\n      /**\r\n       * aMenu: 接受到的动态路由数据 menu的结构外层有父级path 里面有一个childen 记录页面的路由\r\n       * first: 为了区分外界 调用formatRoutes 和 当前文件调用 formatRoutes\r\n      */\r\n    formatRoutes: function (aMenu = [], first) {\r\n      // window.console.log('aMenu')\r\n      // window.console.log(aMenu)\r\n      const aRouter = []\r\n      // 获取到全局配置中的 props\r\n      const propsConfig = this.$website.menu.props;\r\n      // 设置 props默认值 作用就是将字段设置成配置的\r\n      const propsDefault = {\r\n        label: propsConfig.label || 'name',\r\n        path: propsConfig.path || 'path',\r\n        icon: propsConfig.icon || 'icon',\r\n        children: propsConfig.children || 'children',\r\n        meta: propsConfig.meta || 'meta',\r\n      }\r\n      // 如果没有权限菜单就结束\r\n      if (aMenu.length === 0) return;\r\n      // 开始处理menu\r\n      for (let i = 0; i < aMenu.length; i++) {\r\n        // 取到当前要处理的一项\r\n        const oMenu = aMenu[i];\r\n        // 这一块的赋值 也就是取到返回的值\r\n        let path = (() => {\r\n            if (first) {\r\n              // 将 '/index' 替换为 ''\r\n              return oMenu[propsDefault.path].replace('/index', '')\r\n            } else {\r\n              return oMenu[propsDefault.path]\r\n            }\r\n          })(),\r\n          //特殊处理组件 执行完这个 component 也就是精确到具体的文件了  views文件夹下面就是具体的页面代码\r\n          component = 'views' + oMenu.path,\r\n          name = oMenu[propsDefault.label],\r\n          icon = oMenu[propsDefault.icon],\r\n          children = oMenu[propsDefault.children],\r\n          meta = oMenu[propsDefault.meta] || {};\r\n          // meta中 keepalive 的处理\r\n        meta = Object.assign(meta, (function () {\r\n          if (option.keepAlive === true) {\r\n            return {\r\n              keepAlive: true\r\n            }\r\n          }\r\n        })());\r\n        //是否有子路由\r\n        const isChild = children.length !== 0;\r\n        const oRouter = {\r\n          path: path,\r\n          component(resolve) {\r\n            // 判断是否为首路由\r\n            if (first) {\r\n              require(['../page/index'], resolve)\r\n              return\r\n              // 判断是否为多层路由\r\n            } else if (isChild && !first) {\r\n              require(['../page/index/layout'], resolve)\r\n              return\r\n              // 判断是否为最终的页面视图\r\n            } else {\r\n              require([`../${component}.vue`], resolve)\r\n            }\r\n          },\r\n          name: name,\r\n          icon: icon,\r\n          meta: meta,\r\n          redirect: (() => {\r\n            // 第一次进来但是没有子路由的 需要添加redirect\r\n            if (!isChild && first && !isURL(path)) return `${path}/index`\r\n            else return '';\r\n          })(),\r\n          // 整理子路由的route 配置\r\n          // 处理是否为一级路由\r\n          children: !isChild ? (() => {\r\n            if (first) {\r\n              // 这里的isURL判断，因为这个网站有使用 iframe。所以需要判断是否为网页链接\r\n              if (!isURL(path)) oMenu[propsDefault.path] = `${path}/index`;\r\n              return [{\r\n                component(resolve) {\r\n                  require([`../${component}.vue`], resolve)\r\n                },\r\n                icon: icon,\r\n                name: name,\r\n                meta: meta,\r\n                path: 'index'\r\n              }]\r\n            }\r\n            return [];\r\n          })() : (() => {\r\n            /**\r\n             * 这里是重点，当有子路由的时候 会再去执行 formatRoutes 方法，然后又会有一个新的 aMenu for循环。\r\n             * 最后返回的是一个数组 aRouter 这个数组就会作为 childen的值被 return\r\n            */\r\n            return this.formatRoutes(children, false)\r\n          })()\r\n        }\r\n        aRouter.push(oRouter)\r\n      }\r\n      // for循环结束\r\n      // 这个first 卡的其实就是首路由\r\n      if (first) {\r\n        this.safe.$router.addRoutes(aRouter)\r\n      } else {\r\n        // 这里返回的是子组件\r\n        return aRouter\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default RouterPlugin;\r\n"],"mappings":"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"}]}