{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/desk/notice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/desk/notice.vue","mtime":1675244276627},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getList, remove, update, add, getNotice } from \"@/api/desk/notice\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        dialogWidth: 950,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        viewBtn: true,\n        selection: true,\n        excelBtn: true,\n        dialogClickModal: false,\n        column: [{\n          label: \"通知标题\",\n          prop: \"title\",\n          span: 24,\n          row: true,\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知标题\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知类型\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=notice\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          slot: true,\n          prop: \"category\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知类型\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知时间\",\n          prop: \"releaseTimeRange\",\n          type: \"datetime\",\n          format: \"yyyy-MM-dd hh:mm:ss\",\n          valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n          searchRange: true,\n          hide: true,\n          addDisplay: false,\n          editDisplay: false,\n          viewDisplay: false,\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入通知时间\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"通知日期\",\n          prop: \"releaseTime\",\n          type: \"date\",\n          format: \"yyyy-MM-dd hh:mm:ss\",\n          valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n          rules: [{\n            required: true,\n            message: \"请输入通知日期\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"通知内容\",\n          prop: \"content\",\n          component: 'AvueUeditor',\n          options: {\n            action: '/api/blade-resource/oss/endpoint/put-file',\n            props: {\n              res: \"data\",\n              url: \"link\"\n            }\n          },\n          hide: true,\n          minRows: 6,\n          span: 24\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.notice_add, false),\n        viewBtn: this.vaildData(this.permission.notice_view, false),\n        delBtn: this.vaildData(this.permission.notice_delete, false),\n        editBtn: this.vaildData(this.permission.notice_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    rowSave: function rowSave(row, done, loading) {\n      var _this = this;\n      add(row).then(function () {\n        _this.onLoad(_this.page);\n        _this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this2 = this;\n      update(row).then(function () {\n        _this2.onLoad(_this2.page);\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this3 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this3.onLoad(_this3.page);\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this4 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this4.ids);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this4.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this5 = this;\n      if ([\"edit\", \"view\"].includes(type)) {\n        getNotice(this.form.id).then(function (res) {\n          _this5.form = res.data.data;\n        });\n      }\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this6 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var releaseTimeRange = this.query.releaseTimeRange;\n      var values = _objectSpread({}, params);\n      if (releaseTimeRange) {\n        values = _objectSpread(_objectSpread({}, params), {}, {\n          releaseTime_datege: releaseTimeRange[0],\n          releaseTime_datelt: releaseTimeRange[1]\n        }, this.query);\n        values.releaseTimeRange = null;\n      }\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(values, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this6.page.total = data.total;\n        _this6.data = data.records;\n        _this6.loading = false;\n        _this6.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;AAsCA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAR;UACAS;UACAC;UACAC;YACAX;YACAY;UACA;UACAC;UACAC;UACAb;UACAG;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAR;UACAC;UACAQ;UACAM;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAjB;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAR;UACAC;UACAQ;UACAM;UACAC;UACAX;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAR;UACAC;UACAqB;UACAC;YACAC;YACAb;cACAc;cACAC;YACA;UACA;UACAR;UACAS;UACAzB;QACA;MAEA;MACAzB;IACA;EACA;EACAmD,0CACAC;IACAC;MACA;QACAC;QACApC;QACAqC;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAA;MACA;MACA;IACA;EAAA,EACA;EACAC;IACAC;MAAA;MACAC;QACA;QACA;UACA5B;UACAF;QACA;QACA+B;MACA;QACAC;QACA3D;MACA;IACA;IACA4D;MAAA;MACAC;QACA;QACA;UACAhC;UACAF;QACA;QACA+B;MACA;QACAC;QACA3D;MACA;IACA;IACA8D;MAAA;MACA;QACAC;QACAC;QACAnC;MACA,GACAoC;QACA;MACA,GACAA;QACA;QACA;UACApC;UACAF;QACA;MACA;IACA;IACAuC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACAT;IACA;IACAU;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;QACA;QACA;MACA;MACA;QACAP;QACAC;QACAnC;MACA,GACAoC;QACA;MACA,GACAA;QACA;QACA;UACApC;UACAF;QACA;QACA;MACA;IACA;IACA4C;MAAA;MACA;QACAC;UACA;QACA;MACA;MACAd;IACA;IACAe;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACA,+BACAC,OACA;MACA;QACAC,yCACAD;UACAE;UACAC;QAAA,GACA,WACA;QACAF;MACA;MACA;MACAG;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["data","form","query","loading","page","pageSize","currentPage","total","selectionList","option","height","calcHeight","dialogWidth","tip","searchShow","searchMenuSpan","border","index","viewBtn","selection","excelBtn","dialogClickModal","column","label","prop","span","row","search","rules","required","message","trigger","type","dicUrl","props","value","dataType","slot","format","valueFormat","searchRange","hide","addDisplay","editDisplay","viewDisplay","component","options","action","res","url","minRows","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","rowSave","add","done","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","selectionChange","selectionClear","handleDelete","beforeOpen","getNotice","currentChange","sizeChange","refreshChange","onLoad","params","values","releaseTime_datege","releaseTime_datelt","getList"],"sourceRoot":"src/views/desk","sources":["notice.vue"],"sourcesContent":["<template>\r\n  <basic-container>\r\n    <avue-crud :option=\"option\"\r\n               :table-loading=\"loading\"\r\n               :data=\"data\"\r\n               :page.sync=\"page\"\r\n               ref=\"crud\"\r\n               @row-del=\"rowDel\"\r\n               v-model=\"form\"\r\n               :permission=\"permissionList\"\r\n               @row-update=\"rowUpdate\"\r\n               @row-save=\"rowSave\"\r\n               :before-open=\"beforeOpen\"\r\n               @search-change=\"searchChange\"\r\n               @search-reset=\"searchReset\"\r\n               @selection-change=\"selectionChange\"\r\n               @current-change=\"currentChange\"\r\n               @size-change=\"sizeChange\"\r\n               @refresh-change=\"refreshChange\"\r\n               @on-load=\"onLoad\">\r\n      <template slot=\"menuLeft\">\r\n        <el-button type=\"danger\"\r\n                   size=\"small\"\r\n                   icon=\"el-icon-delete\"\r\n                   plain\r\n                   v-if=\"permission.notice_delete\"\r\n                   @click=\"handleDelete\">删 除\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"{row}\"\r\n                slot=\"category\">\r\n        <el-tag>{{row.categoryName}}</el-tag>\r\n      </template>\r\n    </avue-crud>\r\n  </basic-container>\r\n</template>\r\n\r\n<script>\r\n  import {getList, remove, update, add, getNotice} from \"@/api/desk/notice\";\r\n  import {mapGetters} from \"vuex\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {},\r\n        query: {},\r\n        loading: true,\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        selectionList: [],\r\n        option: {\r\n          height: 'auto',\r\n          calcHeight: 30,\r\n          dialogWidth: 950,\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          border: true,\r\n          index: true,\r\n          viewBtn: true,\r\n          selection: true,\r\n          excelBtn: true,\r\n          dialogClickModal: false,\r\n          column: [\r\n            {\r\n              label: \"通知标题\",\r\n              prop: \"title\",\r\n              span: 24,\r\n              row: true,\r\n              search: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入通知标题\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"通知类型\",\r\n              type: \"select\",\r\n              dicUrl: \"/api/blade-system/dict/dictionary?code=notice\",\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              dataType: \"number\",\r\n              slot: true,\r\n              prop: \"category\",\r\n              search: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入通知类型\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"通知时间\",\r\n              prop: \"releaseTimeRange\",\r\n              type: \"datetime\",\r\n              format: \"yyyy-MM-dd hh:mm:ss\",\r\n              valueFormat: \"yyyy-MM-dd hh:mm:ss\",\r\n              searchRange:true,\r\n              hide: true,\r\n              addDisplay: false,\r\n              editDisplay: false,\r\n              viewDisplay: false,\r\n              search: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入通知时间\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"通知日期\",\r\n              prop: \"releaseTime\",\r\n              type: \"date\",\r\n              format: \"yyyy-MM-dd hh:mm:ss\",\r\n              valueFormat: \"yyyy-MM-dd hh:mm:ss\",\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入通知日期\",\r\n                trigger: \"click\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"通知内容\",\r\n              prop: \"content\",\r\n              component: 'AvueUeditor',\r\n              options: {\r\n                action: '/api/blade-resource/oss/endpoint/put-file',\r\n                props: {\r\n                  res: \"data\",\r\n                  url: \"link\",\r\n                }\r\n              },\r\n              hide: true,\r\n              minRows: 6,\r\n              span: 24,\r\n            }\r\n          ]\r\n        },\r\n        data: []\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"permission\"]),\r\n      permissionList() {\r\n        return {\r\n          addBtn: this.vaildData(this.permission.notice_add, false),\r\n          viewBtn: this.vaildData(this.permission.notice_view, false),\r\n          delBtn: this.vaildData(this.permission.notice_delete, false),\r\n          editBtn: this.vaildData(this.permission.notice_edit, false)\r\n        };\r\n      },\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      }\r\n    },\r\n    methods: {\r\n      rowSave(row, done, loading) {\r\n        add(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowUpdate(row, index, done, loading) {\r\n        update(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowDel(row) {\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(row.id);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      searchReset() {\r\n        this.query = {};\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      handleDelete() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            this.$refs.crud.toggleSelection();\r\n          });\r\n      },\r\n      beforeOpen(done, type) {\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getNotice(this.form.id).then(res => {\r\n            this.form = res.data.data;\r\n          });\r\n        }\r\n        done();\r\n      },\r\n      currentChange(currentPage) {\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize) {\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        const {releaseTimeRange} = this.query;\r\n        let values = {\r\n          ...params,\r\n        };\r\n        if (releaseTimeRange) {\r\n          values = {\r\n            ...params,\r\n            releaseTime_datege: releaseTimeRange[0],\r\n            releaseTime_datelt: releaseTimeRange[1],\r\n            ...this.query\r\n          };\r\n          values.releaseTimeRange = null;\r\n        }\r\n        this.loading = true;\r\n        getList(page.currentPage, page.pageSize, Object.assign(values, this.query)).then(res => {\r\n          const data = res.data.data;\r\n          this.page.total = data.total;\r\n          this.data = data.records;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}