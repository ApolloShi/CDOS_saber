{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/system/tenantpackage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/system/tenantpackage.vue","mtime":1675244276642},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getList, getDetail, add, update, remove } from \"@/api/system/tenantpackage\";\nimport { mapGetters } from \"vuex\";\nimport { getMenuTree } from \"@/api/system/menu\";\nexport default {\n  name: \"tenantPackage\",\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        viewBtn: true,\n        selection: true,\n        dialogClickModal: false,\n        dialogWidth: 600,\n        column: [{\n          label: \"产品包名\",\n          prop: \"packageName\",\n          search: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入产品包名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单列表\",\n          prop: \"menuId\",\n          span: 24,\n          type: \"tree\",\n          dicData: [],\n          hide: true,\n          multiple: true,\n          props: {\n            label: \"title\"\n          },\n          rules: [{\n            required: true,\n            message: \"请选择菜单\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"备注\",\n          prop: \"remark\",\n          span: 24\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: true,\n        viewBtn: false,\n        delBtn: true,\n        editBtn: true\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    initData: function initData() {\n      var _this = this;\n      getMenuTree().then(function (res) {\n        var column = _this.findObject(_this.option.column, \"menuId\");\n        column.dicData = res.data.data;\n      });\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n      row.menuId = row.menuId.join(\",\");\n      add(row).then(function () {\n        _this2.onLoad(_this2.page);\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        loading();\n        window.console.log(error);\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n      update(row).then(function () {\n        _this3.onLoad(_this3.page);\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        loading();\n        console.log(error);\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this4 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this5.$refs.crud.toggleSelection();\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this6 = this;\n      if ([\"add\", \"edit\"].includes(type)) {\n        this.initData();\n      }\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(function (res) {\n          _this6.form = res.data.data;\n        });\n      }\n      done();\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this7 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this7.page.total = data.total;\n        _this7.data = data.records;\n        _this7.loading = false;\n        _this7.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;AA+BA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACAC;UACAC;UACAC;UACAC;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAP;UACAC;UACAE;UACAK;UACAC;UACAC;UACAC;UACAC;YACAZ;UACA;UACAI;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACAP;UACAC;UACAE;QACA;MAEA;MACAzB;IACA;EACA;EACAmC,0CACAC;IACAC;MACA;QACAC;QACArB;QACAsB;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAA;MACA;MACA;IACA;EAAA,EACA;EACAC;IACAC;MAAA;MACAC;QACA;QACAvB;MACA;IACA;IACAwB;MAAA;MACAC;MACAC;QACA;QACA;UACAjB;UACAF;QACA;QACAoB;MACA;QACA7C;QACA8C;MACA;IACA;IACAC;MAAA;MACAC;QACA;QACA;UACArB;UACAF;QACA;QACAoB;MACA;QACA7C;QACAiD;MACA;IACA;IACAC;MAAA;MACA;QACAC;QACAC;QACAzB;MACA,GACA0B;QACA;MACA,GACAA;QACA;QACA;UACA1B;UACAF;QACA;MACA;IACA;IACA6B;MAAA;MACA;QACA;QACA;MACA;MACA;QACAH;QACAC;QACAzB;MACA,GACA0B;QACA;MACA,GACAA;QACA;QACA;UACA1B;UACAF;QACA;QACA;MACA;IACA;IACA8B;MAAA;MACA;QACA;MACA;MACA;QACAC;UACA;QACA;MACA;MACAX;IACA;IACAY;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACAb;IACA;IACAc;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAC;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","form","query","loading","page","pageSize","currentPage","total","selectionList","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","viewBtn","selection","dialogClickModal","dialogWidth","column","label","prop","search","span","rules","required","message","trigger","type","dicData","hide","multiple","props","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","initData","getMenuTree","rowSave","row","add","done","window","rowUpdate","update","console","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","beforeOpen","getDetail","searchReset","searchChange","selectionChange","selectionClear","currentChange","sizeChange","refreshChange","onLoad","getList"],"sourceRoot":"src/views/system","sources":["tenantpackage.vue"],"sourcesContent":["<template>\r\n    <avue-crud :option=\"option\"\r\n               :table-loading=\"loading\"\r\n               :data=\"data\"\r\n               :page.sync=\"page\"\r\n               :permission=\"permissionList\"\r\n               :before-open=\"beforeOpen\"\r\n               v-model=\"form\"\r\n               ref=\"crud\"\r\n               @row-update=\"rowUpdate\"\r\n               @row-save=\"rowSave\"\r\n               @row-del=\"rowDel\"\r\n               @search-change=\"searchChange\"\r\n               @search-reset=\"searchReset\"\r\n               @selection-change=\"selectionChange\"\r\n               @current-change=\"currentChange\"\r\n               @size-change=\"sizeChange\"\r\n               @refresh-change=\"refreshChange\"\r\n               @on-load=\"onLoad\">\r\n      <template slot=\"menuLeft\">\r\n        <el-button type=\"danger\"\r\n                   size=\"small\"\r\n                   icon=\"el-icon-delete\"\r\n                   plain\r\n                   @click=\"handleDelete\">删 除\r\n        </el-button>\r\n      </template>\r\n    </avue-crud>\r\n</template>\r\n\r\n<script>\r\nimport {getList, getDetail, add, update, remove} from \"@/api/system/tenantpackage\";\r\nimport {mapGetters} from \"vuex\";\r\nimport {getMenuTree} from \"@/api/system/menu\";\r\n\r\nexport default {\r\n  name: \"tenantPackage\",\r\n  data() {\r\n    return {\r\n      form: {},\r\n      query: {},\r\n      loading: true,\r\n      page: {\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n        total: 0\r\n      },\r\n      selectionList: [],\r\n      option: {\r\n        height: 'auto',\r\n        calcHeight: 30,\r\n        tip: false,\r\n        searchShow: true,\r\n        searchMenuSpan: 6,\r\n        border: true,\r\n        index: true,\r\n        viewBtn: true,\r\n        selection: true,\r\n        dialogClickModal: false,\r\n        dialogWidth: 600,\r\n        column: [\r\n          {\r\n            label: \"产品包名\",\r\n            prop: \"packageName\",\r\n            search: true,\r\n            span: 24,\r\n            rules: [{\r\n              required: true,\r\n              message: \"请输入产品包名称\",\r\n              trigger: \"blur\"\r\n            }]\r\n          },\r\n          {\r\n            label: \"菜单列表\",\r\n            prop: \"menuId\",\r\n            span: 24,\r\n            type: \"tree\",\r\n            dicData: [],\r\n            hide: true,\r\n            multiple: true,\r\n            props: {\r\n              label: \"title\"\r\n            },\r\n            rules: [{\r\n              required: true,\r\n              message: \"请选择菜单\",\r\n              trigger: \"blur\"\r\n            }]\r\n          },\r\n          {\r\n            label: \"备注\",\r\n            prop: \"remark\",\r\n            span: 24\r\n          },\r\n        ]\r\n      },\r\n      data: []\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"permission\"]),\r\n    permissionList() {\r\n      return {\r\n        addBtn: true,\r\n        viewBtn: false,\r\n        delBtn: true,\r\n        editBtn: true\r\n      };\r\n    },\r\n    ids() {\r\n      let ids = [];\r\n      this.selectionList.forEach(ele => {\r\n        ids.push(ele.id);\r\n      });\r\n      return ids.join(\",\");\r\n    }\r\n  },\r\n  methods: {\r\n    initData() {\r\n      getMenuTree().then(res => {\r\n        const column = this.findObject(this.option.column, \"menuId\");\r\n        column.dicData = res.data.data;\r\n      });\r\n    },\r\n    rowSave(row, done, loading) {\r\n      row.menuId = row.menuId.join(\",\");\r\n      add(row).then(() => {\r\n        this.onLoad(this.page);\r\n        this.$message({\r\n          type: \"success\",\r\n          message: \"操作成功!\"\r\n        });\r\n        done();\r\n      }, error => {\r\n        loading();\r\n        window.console.log(error);\r\n      });\r\n    },\r\n    rowUpdate(row, index, done, loading) {\r\n      update(row).then(() => {\r\n        this.onLoad(this.page);\r\n        this.$message({\r\n          type: \"success\",\r\n          message: \"操作成功!\"\r\n        });\r\n        done();\r\n      }, error => {\r\n        loading();\r\n        console.log(error);\r\n      });\r\n    },\r\n    rowDel(row) {\r\n      this.$confirm(\"确定将选择数据删除?\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          return remove(row.id);\r\n        })\r\n        .then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n        });\r\n    },\r\n    handleDelete() {\r\n      if (this.selectionList.length === 0) {\r\n        this.$message.warning(\"请选择至少一条数据\");\r\n        return;\r\n      }\r\n      this.$confirm(\"确定将选择数据删除?\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          return remove(this.ids);\r\n        })\r\n        .then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          this.$refs.crud.toggleSelection();\r\n        });\r\n    },\r\n    beforeOpen(done, type) {\r\n      if ([\"add\", \"edit\"].includes(type)) {\r\n        this.initData();\r\n      }\r\n      if ([\"edit\", \"view\"].includes(type)) {\r\n        getDetail(this.form.id).then(res => {\r\n          this.form = res.data.data;\r\n        });\r\n      }\r\n      done();\r\n    },\r\n    searchReset() {\r\n      this.query = {};\r\n      this.onLoad(this.page);\r\n    },\r\n    searchChange(params, done) {\r\n      this.query = params;\r\n      this.page.currentPage = 1;\r\n      this.onLoad(this.page, params);\r\n      done();\r\n    },\r\n    selectionChange(list) {\r\n      this.selectionList = list;\r\n    },\r\n    selectionClear() {\r\n      this.selectionList = [];\r\n      this.$refs.crud.toggleSelection();\r\n    },\r\n    currentChange(currentPage) {\r\n      this.page.currentPage = currentPage;\r\n    },\r\n    sizeChange(pageSize) {\r\n      this.page.pageSize = pageSize;\r\n    },\r\n    refreshChange() {\r\n      this.onLoad(this.page, this.query);\r\n    },\r\n    onLoad(page, params = {}) {\r\n      this.loading = true;\r\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\r\n        const data = res.data.data;\r\n        this.page.total = data.total;\r\n        this.data = data.records;\r\n        this.loading = false;\r\n        this.selectionClear();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}