{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/system/menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/system/menu.vue","mtime":1675244276642},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getLazyList, remove, update, add, getMenu } from \"@/api/system/menu\";\nimport { mapGetters } from \"vuex\";\nimport iconList from \"@/config/iconList\";\nimport func from \"@/util/func\";\nimport { getMenuTree } from \"@/api/system/menu\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      query: {},\n      loading: true,\n      selectionList: [],\n      parentId: 0,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      option: {\n        lazy: true,\n        tip: false,\n        simplePage: true,\n        searchShow: true,\n        searchMenuSpan: 6,\n        dialogWidth: \"60%\",\n        tree: true,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        menuWidth: 300,\n        dialogClickModal: false,\n        column: [{\n          label: \"菜单名称\",\n          prop: \"name\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"路由地址\",\n          prop: \"path\",\n          rules: [{\n            required: true,\n            message: \"请输入路由地址\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"上级菜单\",\n          prop: \"parentId\",\n          type: \"tree\",\n          dicData: [],\n          hide: true,\n          addDisabled: false,\n          props: {\n            label: \"title\"\n          },\n          rules: [{\n            required: false,\n            message: \"请选择上级菜单\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"菜单图标\",\n          prop: \"source\",\n          type: \"icon\",\n          slot: true,\n          iconList: iconList,\n          rules: [{\n            required: true,\n            message: \"请输入菜单图标\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"菜单编号\",\n          prop: \"code\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单类型\",\n          prop: \"category\",\n          type: \"radio\",\n          dicData: [{\n            label: \"菜单\",\n            value: 1\n          }, {\n            label: \"按钮\",\n            value: 2\n          }],\n          hide: true,\n          rules: [{\n            required: true,\n            message: \"请选择菜单类型\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单别名\",\n          prop: \"alias\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单别名\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"新窗口\",\n          prop: \"isOpen\",\n          type: \"radio\",\n          disabled: false,\n          dicData: [{\n            label: \"否\",\n            value: 1\n          }, {\n            label: \"是\",\n            value: 2\n          }],\n          value: 1,\n          rules: [{\n            required: true,\n            message: \"请选择新窗口打开\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单排序\",\n          prop: \"sort\",\n          type: \"number\",\n          row: true,\n          span: 24,\n          rules: [{\n            required: true,\n            message: \"请输入菜单排序\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单备注\",\n          prop: \"remark\",\n          type: \"textarea\",\n          span: 24,\n          minRows: 2,\n          hide: true\n        }]\n      },\n      data: []\n    };\n  },\n  watch: {\n    'form.category': function formCategory() {\n      var category = func.toInt(this.form.category);\n      this.$refs.crud.option.column.filter(function (item) {\n        if (item.prop === \"path\") {\n          item.rules[0].required = category === 1;\n        }\n        if (item.prop === 'isOpen') {\n          item.disabled = category === 2;\n        }\n      });\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"userInfo\", \"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.menu_add, false),\n        viewBtn: this.vaildData(this.permission.menu_view, false),\n        delBtn: this.vaildData(this.permission.menu_delete, false),\n        editBtn: this.vaildData(this.permission.menu_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  methods: {\n    initData: function initData() {\n      var _this = this;\n      getMenuTree().then(function (res) {\n        var column = _this.findObject(_this.option.column, \"parentId\");\n        column.dicData = res.data.data;\n      });\n    },\n    handleAdd: function handleAdd(row) {\n      this.parentId = row.id;\n      var column = this.findObject(this.option.column, \"parentId\");\n      column.value = row.id;\n      column.addDisabled = true;\n      this.$refs.crud.rowAdd();\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n      add(row).then(function (res) {\n        // 获取新增数据的相关字段\n        var data = res.data.data;\n        row.id = data.id;\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        // 数据回调进行刷新\n        done(row);\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n      update(row).then(function () {\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        // 数据回调进行刷新\n        done(row);\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row, index, done) {\n      var _this4 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        // 数据回调进行刷新\n        done(row);\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        // 刷新表格数据并重载\n        _this5.data = [];\n        _this5.parentId = 0;\n        _this5.$refs.crud.refreshTable();\n        _this5.$refs.crud.toggleSelection();\n        // 表格数据重载\n        _this5.onLoad(_this5.page);\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.parentId = 0;\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.parentId = '';\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this6 = this;\n      if ([\"add\", \"edit\"].includes(type)) {\n        this.initData();\n      }\n      if ([\"edit\", \"view\"].includes(type)) {\n        getMenu(this.form.id).then(function (res) {\n          _this6.form = res.data.data;\n        });\n      }\n      done();\n    },\n    beforeClose: function beforeClose(done) {\n      this.parentId = \"\";\n      var column = this.findObject(this.option.column, \"parentId\");\n      column.value = \"\";\n      column.addDisabled = false;\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this7 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getLazyList(this.parentId, Object.assign(params, this.query)).then(function (res) {\n        _this7.data = res.data.data;\n        _this7.loading = false;\n        _this7.selectionClear();\n      });\n    },\n    treeLoad: function treeLoad(tree, treeNode, resolve) {\n      var parentId = tree.id;\n      getLazyList(parentId).then(function (res) {\n        resolve(res.data.data);\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;AAmDA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACAC;UACAC;UACAC;UACAC,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAE,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAC;UACAC;UACAC;UACAC;YACAX;UACA;UACAG,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAK;UACAC;UACAV,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAC;UACAC,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAC,UACA;YACAR;YACAc;UACA,GACA;YACAd;YACAc;UACA,EACA;UACAL;UACAN,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAC;UACAC,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAQ;UACAP,UACA;YACAR;YACAc;UACA,GACA;YACAd;YACAc;UACA,EACA;UACAA;UACAX,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAS;UACAC;UACAd,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACAN;UACAC;UACAM;UACAU;UACAC;UACAT;QACA;MAEA;MACAlC;IACA;EACA;EACA4C;IACA;MACA;MACA;QACA;UACAC;QACA;QACA;UACAA;QACA;MACA;IACA;EACA;EACAC,0CACAC;IACAC;MACA;QACAC;QACA5B;QACA6B;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAA;MACA;MACA;IACA;EAAA,EACA;EACAC;IACAC;MAAA;MACAC;QACA;QACA/B;MACA;IACA;IACAgC;MACA;MACA;MACAhC;MACAA;MACA;IACA;IACAiC;MAAA;MACAC;QACA;QACA;QACAjB;QACA;UACAT;UACAF;QACA;QACA;QACA6B;MACA;QACAC;QACAzD;MACA;IACA;IACA0D;MAAA;MACAC;QACA;UACA9B;UACAF;QACA;QACA;QACA6B;MACA;QACAC;QACAzD;MACA;IACA;IACA4D;MAAA;MACA;QACAC;QACAC;QACAjC;MACA,GACAkC;QACA;MACA,GACAA;QACA;UACAlC;UACAF;QACA;QACA;QACA6B;MACA;IACA;IACAQ;MAAA;MACA;QACA;QACA;MACA;MACA;QACAH;QACAC;QACAjC;MACA,GACAkC;QACA;MACA,GACAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;UACAlC;UACAF;QACA;MACA;IACA;IACAsC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACAV;IACA;IACAW;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;QACA;MACA;MACA;QACAC;UACA;QACA;MACA;MACAd;IACA;IACAe;MACA;MACA;MACAlD;MACAA;MACAmC;IACA;IACAgB;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAC;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACAD;QACAE;MACA;IACA;EACA;AACA","names":["data","form","query","loading","selectionList","parentId","page","pageSize","currentPage","total","option","lazy","tip","simplePage","searchShow","searchMenuSpan","dialogWidth","tree","border","index","selection","viewBtn","menuWidth","dialogClickModal","column","label","prop","search","rules","required","message","trigger","type","dicData","hide","addDisabled","props","slot","iconList","value","disabled","row","span","minRows","watch","item","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","methods","initData","getMenuTree","handleAdd","rowSave","add","done","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","searchReset","searchChange","selectionChange","selectionClear","beforeOpen","getMenu","beforeClose","currentChange","sizeChange","refreshChange","onLoad","getLazyList","treeLoad","resolve"],"sourceRoot":"src/views/system","sources":["menu.vue"],"sourcesContent":["<template>\r\n  <basic-container>\r\n    <avue-crud :option=\"option\"\r\n               :table-loading=\"loading\"\r\n               :data=\"data\"\r\n               ref=\"crud\"\r\n               v-model=\"form\"\r\n               :permission=\"permissionList\"\r\n               :before-open=\"beforeOpen\"\r\n               :before-close=\"beforeClose\"\r\n               @row-del=\"rowDel\"\r\n               @row-update=\"rowUpdate\"\r\n               @row-save=\"rowSave\"\r\n               @search-change=\"searchChange\"\r\n               @search-reset=\"searchReset\"\r\n               @selection-change=\"selectionChange\"\r\n               @current-change=\"currentChange\"\r\n               @size-change=\"sizeChange\"\r\n               @refresh-change=\"refreshChange\"\r\n               @on-load=\"onLoad\"\r\n               @tree-load=\"treeLoad\">\r\n      <template slot=\"menuLeft\">\r\n        <el-button type=\"danger\"\r\n                   size=\"small\"\r\n                   icon=\"el-icon-delete\"\r\n                   v-if=\"permission.menu_delete\"\r\n                   plain\r\n                   @click=\"handleDelete\">删 除\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"scope\" slot=\"menu\">\r\n        <el-button\r\n          type=\"text\"\r\n          icon=\"el-icon-circle-plus-outline\"\r\n          size=\"small\"\r\n          @click.stop=\"handleAdd(scope.row,scope.index)\"\r\n          v-if=\"userInfo.role_name.includes('admin') && scope.row.category === 1\"\r\n        >新增子项\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"{row}\"\r\n                slot=\"source\">\r\n        <div style=\"text-align:center\">\r\n          <i :class=\"row.source\"/>\r\n        </div>\r\n      </template>\r\n    </avue-crud>\r\n  </basic-container>\r\n</template>\r\n\r\n<script>\r\n  import {getLazyList, remove, update, add, getMenu} from \"@/api/system/menu\";\r\n  import {mapGetters} from \"vuex\";\r\n  import iconList from \"@/config/iconList\";\r\n  import func from \"@/util/func\";\r\n  import {getMenuTree} from \"@/api/system/menu\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {},\r\n        query: {},\r\n        loading: true,\r\n        selectionList: [],\r\n        parentId: 0,\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0,\r\n        },\r\n        option: {\r\n          lazy: true,\r\n          tip: false,\r\n          simplePage: true,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          dialogWidth: \"60%\",\r\n          tree: true,\r\n          border: true,\r\n          index: true,\r\n          selection: true,\r\n          viewBtn: true,\r\n          menuWidth: 300,\r\n          dialogClickModal: false,\r\n          column: [\r\n            {\r\n              label: \"菜单名称\",\r\n              prop: \"name\",\r\n              search: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单名称\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"路由地址\",\r\n              prop: \"path\",\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入路由地址\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"上级菜单\",\r\n              prop: \"parentId\",\r\n              type: \"tree\",\r\n              dicData: [],\r\n              hide: true,\r\n              addDisabled: false,\r\n              props: {\r\n                label: \"title\"\r\n              },\r\n              rules: [\r\n                {\r\n                  required: false,\r\n                  message: \"请选择上级菜单\",\r\n                  trigger: \"click\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单图标\",\r\n              prop: \"source\",\r\n              type: \"icon\",\r\n              slot: true,\r\n              iconList: iconList,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单图标\",\r\n                  trigger: \"click\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单编号\",\r\n              prop: \"code\",\r\n              search: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单编号\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单类型\",\r\n              prop: \"category\",\r\n              type: \"radio\",\r\n              dicData: [\r\n                {\r\n                  label: \"菜单\",\r\n                  value: 1\r\n                },\r\n                {\r\n                  label: \"按钮\",\r\n                  value: 2\r\n                }\r\n              ],\r\n              hide: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请选择菜单类型\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单别名\",\r\n              prop: \"alias\",\r\n              search: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单别名\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"新窗口\",\r\n              prop: \"isOpen\",\r\n              type: \"radio\",\r\n              disabled: false,\r\n              dicData: [\r\n                {\r\n                  label: \"否\",\r\n                  value: 1\r\n                },\r\n                {\r\n                  label: \"是\",\r\n                  value: 2\r\n                }\r\n              ],\r\n              value: 1,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请选择新窗口打开\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单排序\",\r\n              prop: \"sort\",\r\n              type: \"number\",\r\n              row: true,\r\n              span: 24,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单排序\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单备注\",\r\n              prop: \"remark\",\r\n              type: \"textarea\",\r\n              span: 24,\r\n              minRows: 2,\r\n              hide: true\r\n            }\r\n          ]\r\n        },\r\n        data: []\r\n      };\r\n    },\r\n    watch: {\r\n      'form.category'() {\r\n        const category = func.toInt(this.form.category);\r\n        this.$refs.crud.option.column.filter(item => {\r\n          if (item.prop === \"path\") {\r\n            item.rules[0].required = category === 1;\r\n          }\r\n          if (item.prop === 'isOpen') {\r\n            item.disabled = category === 2;\r\n          }\r\n        });\r\n      },\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"userInfo\", \"permission\"]),\r\n      permissionList() {\r\n        return {\r\n          addBtn: this.vaildData(this.permission.menu_add, false),\r\n          viewBtn: this.vaildData(this.permission.menu_view, false),\r\n          delBtn: this.vaildData(this.permission.menu_delete, false),\r\n          editBtn: this.vaildData(this.permission.menu_edit, false)\r\n        };\r\n      },\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      }\r\n    },\r\n    methods: {\r\n      initData() {\r\n        getMenuTree().then(res => {\r\n          const column = this.findObject(this.option.column, \"parentId\");\r\n          column.dicData = res.data.data;\r\n        });\r\n      },\r\n      handleAdd(row) {\r\n        this.parentId = row.id;\r\n        const column = this.findObject(this.option.column, \"parentId\");\r\n        column.value = row.id;\r\n        column.addDisabled = true;\r\n        this.$refs.crud.rowAdd();\r\n      },\r\n      rowSave(row, done, loading) {\r\n        add(row).then((res) => {\r\n          // 获取新增数据的相关字段\r\n          const data = res.data.data;\r\n          row.id = data.id;\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          // 数据回调进行刷新\r\n          done(row);\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowUpdate(row, index, done, loading) {\r\n        update(row).then(() => {\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          // 数据回调进行刷新\r\n          done(row);\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowDel(row, index, done) {\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(row.id);\r\n          })\r\n          .then(() => {\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            // 数据回调进行刷新\r\n            done(row);\r\n          });\r\n      },\r\n      handleDelete() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(this.ids);\r\n          })\r\n          .then(() => {\r\n            // 刷新表格数据并重载\r\n            this.data = [];\r\n            this.parentId = 0;\r\n            this.$refs.crud.refreshTable();\r\n            this.$refs.crud.toggleSelection();\r\n            // 表格数据重载\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      searchReset() {\r\n        this.query = {};\r\n        this.parentId = 0;\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.parentId = '';\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      beforeOpen(done, type) {\r\n        if ([\"add\", \"edit\"].includes(type)) {\r\n          this.initData();\r\n        }\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getMenu(this.form.id).then(res => {\r\n            this.form = res.data.data;\r\n          });\r\n        }\r\n        done();\r\n      },\r\n      beforeClose(done) {\r\n        this.parentId = \"\";\r\n        const column = this.findObject(this.option.column, \"parentId\");\r\n        column.value = \"\";\r\n        column.addDisabled = false;\r\n        done();\r\n      },\r\n      currentChange(currentPage) {\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize) {\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        this.loading = true;\r\n        getLazyList(this.parentId, Object.assign(params, this.query)).then(res => {\r\n          this.data = res.data.data;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      },\r\n      treeLoad(tree, treeNode, resolve) {\r\n        const parentId = tree.id;\r\n        getLazyList(parentId).then(res => {\r\n          resolve(res.data.data);\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}