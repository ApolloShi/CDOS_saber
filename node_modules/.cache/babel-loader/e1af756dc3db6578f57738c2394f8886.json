{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/system/topmenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/system/topmenu.vue","mtime":1675244276642},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getList, getDetail, add, update, remove, grant, grantTree, getTopTree } from \"@/api/system/topmenu\";\nimport { mapGetters } from \"vuex\";\nimport iconList from \"@/config/iconList\";\nexport default {\n  data: function data() {\n    return {\n      form: {},\n      box: false,\n      query: {},\n      loading: true,\n      props: {\n        label: \"title\",\n        value: \"key\"\n      },\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      selectionList: [],\n      menuGrantList: [],\n      menuTreeObj: [],\n      option: {\n        height: 'auto',\n        calcHeight: 30,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        viewBtn: true,\n        selection: true,\n        dialogWidth: 900,\n        dialogClickModal: false,\n        column: [{\n          label: \"菜单名\",\n          prop: \"name\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单名\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单图标\",\n          prop: \"source\",\n          type: \"icon\",\n          slot: true,\n          iconList: iconList,\n          rules: [{\n            required: true,\n            message: \"请输入菜单图标\",\n            trigger: \"click\"\n          }]\n        }, {\n          label: \"菜单编号\",\n          prop: \"code\",\n          search: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单编号\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"菜单排序\",\n          prop: \"sort\",\n          type: \"number\",\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请输入菜单排序\",\n            trigger: \"blur\"\n          }]\n        }]\n      },\n      data: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.topmenu_add, false),\n        viewBtn: this.vaildData(this.permission.topmenu_view, false),\n        delBtn: this.vaildData(this.permission.topmenu_delete, false),\n        editBtn: this.vaildData(this.permission.topmenu_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    },\n    idsArray: function idsArray() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids;\n    }\n  }),\n  methods: {\n    submit: function submit() {\n      var _this = this;\n      var menuList = this.$refs.treeMenu.getCheckedKeys();\n      grant(this.idsArray, menuList).then(function () {\n        _this.box = false;\n        _this.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this.onLoad(_this.page);\n      });\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this2 = this;\n      add(row).then(function () {\n        _this2.onLoad(_this2.page);\n        _this2.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this3 = this;\n      update(row).then(function () {\n        _this3.onLoad(_this3.page);\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this4 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this4.onLoad(_this4.page);\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleDelete: function handleDelete() {\n      var _this5 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this5.ids);\n      }).then(function () {\n        _this5.onLoad(_this5.page);\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this5.$refs.crud.toggleSelection();\n      });\n    },\n    handleMenuSetting: function handleMenuSetting() {\n      var _this6 = this;\n      if (this.selectionList.length !== 1) {\n        this.$message.warning(\"只能选择一条数据\");\n        return;\n      }\n      this.menuTreeObj = [];\n      grantTree().then(function (res) {\n        _this6.menuGrantList = res.data.data.menu;\n        getTopTree(_this6.ids).then(function (res) {\n          _this6.menuTreeObj = res.data.data.menu;\n          _this6.box = true;\n        });\n      });\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this7 = this;\n      if ([\"edit\", \"view\"].includes(type)) {\n        getDetail(this.form.id).then(function (res) {\n          _this7.form = res.data.data;\n        });\n      }\n      done();\n    },\n    sortChange: function sortChange(row) {\n      var _this8 = this;\n      update(row).then(function () {\n        _this8.onLoad(_this8.page);\n      }, function (error) {\n        window.console.log(error);\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this9 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(function (res) {\n        var data = res.data.data;\n        _this9.page.total = data.total;\n        _this9.data = data.records;\n        _this9.loading = false;\n        _this9.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;AAoEA;AACA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACArB;UACAsB;UACAC;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACA3B;UACAsB;UACAM;UACAC;UACAC;UACAN,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACA3B;UACAsB;UACAC;UACAC;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACA3B;UACAsB;UACAM;UACAC;UACAL;YACAC;YACAC;YACAC;UACA;QACA;MAEA;MACAjC;IACA;EACA;EACAqC,0CACAC;IACAC;MACA;QACAC;QACAjB;QACAkB;QACAC;MACA;IACA;IACAC;MACA;MACA;QACAA;MACA;MACA;IACA;IACAC;MACA;MACA;QACAD;MACA;MACA;IACA;EAAA,EACA;EACAE;IACAC;MAAA;MACA;MACAC;QACA;QACA;UACAb;UACAF;QACA;QACA;MACA;IACA;IACAgB;MAAA;MACAC;QACA;QACA;UACAf;UACAF;QACA;QACAkB;MACA;QACAC;QACA/C;MACA;IACA;IACAgD;MAAA;MACAC;QACA;QACA;UACAnB;UACAF;QACA;QACAkB;MACA;QACAC;QACA/C;MACA;IACA;IACAkD;MAAA;MACA;QACAC;QACAC;QACAtB;MACA,GACAuB;QACA;MACA,GACAA;QACA;QACA;UACAvB;UACAF;QACA;MACA;IACA;IACA0B;MAAA;MACA;QACA;QACA;MACA;MACA;QACAH;QACAC;QACAtB;MACA,GACAuB;QACA;MACA,GACAA;QACA;QACA;UACAvB;UACAF;QACA;QACA;MACA;IACA;IACA2B;MAAA;MACA;QACA;QACA;MACA;MACA;MACAC,YACAH;QACA;QACAI;UACA;UACA;QACA;MACA;IACA;IACAC;MAAA;MACA;QACAC;UACA;QACA;MACA;MACAb;IACA;IACAc;MAAA;MACAX;QACA;MACA;QACAF;MACA;IACA;IACAc;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACAhB;IACA;IACAiB;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAC;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["data","form","box","query","loading","props","label","value","page","pageSize","currentPage","total","selectionList","menuGrantList","menuTreeObj","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","viewBtn","selection","dialogWidth","dialogClickModal","column","prop","search","rules","required","message","trigger","type","slot","iconList","computed","mapGetters","permissionList","addBtn","delBtn","editBtn","ids","idsArray","methods","submit","grant","rowSave","add","done","window","rowUpdate","update","rowDel","confirmButtonText","cancelButtonText","then","handleDelete","handleMenuSetting","grantTree","getTopTree","beforeOpen","getDetail","sortChange","searchReset","searchChange","selectionChange","selectionClear","currentChange","sizeChange","refreshChange","onLoad","getList"],"sourceRoot":"src/views/system","sources":["topmenu.vue"],"sourcesContent":["<template>\r\n  <basic-container>\r\n    <avue-crud :option=\"option\"\r\n               :table-loading=\"loading\"\r\n               :data=\"data\"\r\n               :page.sync=\"page\"\r\n               :permission=\"permissionList\"\r\n               :before-open=\"beforeOpen\"\r\n               v-model=\"form\"\r\n               ref=\"crud\"\r\n               @row-update=\"rowUpdate\"\r\n               @row-save=\"rowSave\"\r\n               @row-del=\"rowDel\"\r\n               @search-change=\"searchChange\"\r\n               @search-reset=\"searchReset\"\r\n               @selection-change=\"selectionChange\"\r\n               @current-change=\"currentChange\"\r\n               @size-change=\"sizeChange\"\r\n               @refresh-change=\"refreshChange\"\r\n               @on-load=\"onLoad\">\r\n      <template slot=\"menuLeft\">\r\n        <el-button type=\"danger\"\r\n                   size=\"small\"\r\n                   icon=\"el-icon-delete\"\r\n                   plain\r\n                   v-if=\"permission.topmenu_delete\"\r\n                   @click=\"handleDelete\">删 除\r\n        </el-button>\r\n        <el-button size=\"small\"\r\n                   icon=\"el-icon-delete\"\r\n                   @click=\"handleMenuSetting\"\r\n                   v-if=\"permission.topmenu_setting\"\r\n                   plain>菜单配置\r\n        </el-button>\r\n      </template>\r\n      <template slot-scope=\"{row}\" slot=\"source\">\r\n        <div style=\"text-align:center\">\r\n          <i :class=\"row.source\"></i>\r\n        </div>\r\n      </template>\r\n      <template slot=\"sort\" slot-scope=\"{row}\" >\r\n        <el-input-number v-model=\"row.sort\" @change=\"sortChange(row)\" :min=\"1\" :max=\"100\"></el-input-number>\r\n      </template>\r\n    </avue-crud>\r\n    <el-dialog title=\"下级菜单配置\"\r\n               append-to-body\r\n               :visible.sync=\"box\"\r\n               width=\"345px\">\r\n\r\n      <el-tree :data=\"menuGrantList\"\r\n               show-checkbox\r\n               node-key=\"id\"\r\n               ref=\"treeMenu\"\r\n               :default-checked-keys=\"menuTreeObj\"\r\n               :props=\"props\">\r\n      </el-tree>\r\n\r\n      <span slot=\"footer\"\r\n            class=\"dialog-footer\">\r\n        <el-button @click=\"box = false\">取 消</el-button>\r\n        <el-button type=\"primary\"\r\n                   @click=\"submit\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </basic-container>\r\n</template>\r\n\r\n<script>\r\n  import {getList, getDetail, add, update, remove, grant, grantTree, getTopTree} from \"@/api/system/topmenu\";\r\n  import {mapGetters} from \"vuex\";\r\n  import iconList from \"@/config/iconList\";\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {},\r\n        box: false,\r\n        query: {},\r\n        loading: true,\r\n        props: {\r\n          label: \"title\",\r\n          value: \"key\"\r\n        },\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        selectionList: [],\r\n        menuGrantList: [],\r\n        menuTreeObj: [],\r\n        option: {\r\n          height: 'auto',\r\n          calcHeight: 30,\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          border: true,\r\n          index: true,\r\n          viewBtn: true,\r\n          selection: true,\r\n          dialogWidth: 900,\r\n          dialogClickModal: false,\r\n          column: [\r\n            {\r\n              label: \"菜单名\",\r\n              prop: \"name\",\r\n              search: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入菜单名\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"菜单图标\",\r\n              prop: \"source\",\r\n              type: \"icon\",\r\n              slot: true,\r\n              iconList: iconList,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请输入菜单图标\",\r\n                  trigger: \"click\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: \"菜单编号\",\r\n              prop: \"code\",\r\n              search: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入菜单编号\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"菜单排序\",\r\n              prop: \"sort\",\r\n              type: \"number\",\r\n              slot: true,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入菜单排序\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n          ]\r\n        },\r\n        data: []\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"permission\"]),\r\n      permissionList() {\r\n        return {\r\n          addBtn: this.vaildData(this.permission.topmenu_add, false),\r\n          viewBtn: this.vaildData(this.permission.topmenu_view, false),\r\n          delBtn: this.vaildData(this.permission.topmenu_delete, false),\r\n          editBtn: this.vaildData(this.permission.topmenu_edit, false)\r\n        };\r\n      },\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      },\r\n      idsArray() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids;\r\n      }\r\n    },\r\n    methods: {\r\n      submit() {\r\n        const menuList = this.$refs.treeMenu.getCheckedKeys();\r\n        grant(this.idsArray, menuList).then(() => {\r\n          this.box = false;\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          this.onLoad(this.page);\r\n        });\r\n      },\r\n      rowSave(row, done, loading) {\r\n        add(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowUpdate(row, index, done, loading) {\r\n        update(row).then(() => {\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowDel(row) {\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(row.id);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      handleDelete() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            this.$refs.crud.toggleSelection();\r\n          });\r\n      },\r\n      handleMenuSetting() {\r\n        if (this.selectionList.length !== 1) {\r\n          this.$message.warning(\"只能选择一条数据\");\r\n          return;\r\n        }\r\n        this.menuTreeObj = [];\r\n        grantTree()\r\n          .then(res => {\r\n            this.menuGrantList = res.data.data.menu;\r\n            getTopTree(this.ids).then(res => {\r\n              this.menuTreeObj = res.data.data.menu;\r\n              this.box = true;\r\n            });\r\n          });\r\n      },\r\n      beforeOpen(done, type) {\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getDetail(this.form.id).then(res => {\r\n            this.form = res.data.data;\r\n          });\r\n        }\r\n        done();\r\n      },\r\n      sortChange(row) {\r\n        update(row).then(() => {\r\n          this.onLoad(this.page);\r\n        }, error => {\r\n          window.console.log(error);\r\n        });\r\n      },\r\n      searchReset() {\r\n        this.query = {};\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      currentChange(currentPage) {\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize) {\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        this.loading = true;\r\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\r\n          const data = res.data.data;\r\n          this.page.total = data.total;\r\n          this.data = data.records;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .none-border {\r\n    border: 0;\r\n    background-color: transparent !important;\r\n  }\r\n</style>\r\n"]}]}