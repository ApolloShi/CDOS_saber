{"remainingRequest":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js!/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shiliangliang/6cloud/saber/src/views/system/user.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shiliangliang/6cloud/saber/src/views/system/user.vue","mtime":1675244276642},{"path":"/Users/shiliangliang/6cloud/saber/babel.config.js","mtime":1675244276424},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/babel-loader/lib/index.js","mtime":1676864056051},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/cache-loader/dist/cjs.js","mtime":1676864065065},{"path":"/Users/shiliangliang/6cloud/saber/node_modules/vue-loader/lib/index.js","mtime":1676864065555}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/shiliangliang/6cloud/saber/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getList, getUser, getUserPlatform, remove, update, updatePlatform, add, grant, resetPassword, unlock } from \"@/api/system/user\";\nimport { getDeptTree, getDeptLazyTree } from \"@/api/system/dept\";\nimport { getRoleTree } from \"@/api/system/role\";\nimport { getPostList } from \"@/api/system/post\";\nimport { mapGetters } from \"vuex\";\nimport website from '@/config/website';\nimport { getToken } from '@/util/auth';\nexport default {\n  data: function data() {\n    var _this = this;\n    var validatePass = function validatePass(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        callback();\n      }\n    };\n    var validatePass2 = function validatePass2(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== _this.form.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      form: {},\n      search: {},\n      roleBox: false,\n      excelBox: false,\n      platformBox: false,\n      initFlag: true,\n      selectionList: [],\n      query: {},\n      loading: true,\n      platformLoading: false,\n      page: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      platformPage: {\n        pageSize: 10,\n        currentPage: 1,\n        total: 0\n      },\n      init: {\n        roleTree: [],\n        deptTree: []\n      },\n      props: {\n        label: \"title\",\n        value: \"key\"\n      },\n      roleGrantList: [],\n      roleTreeObj: [],\n      treeDeptId: '',\n      treeData: [],\n      treeOption: {\n        nodeKey: 'id',\n        lazy: true,\n        treeLoad: function treeLoad(node, resolve) {\n          var parentId = node.level === 0 ? 0 : node.data.id;\n          getDeptLazyTree(parentId).then(function (res) {\n            resolve(res.data.data.map(function (item) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                leaf: !item.hasChildren\n              });\n            }));\n          });\n        },\n        addBtn: false,\n        menu: false,\n        size: 'small',\n        props: {\n          labelText: '标题',\n          label: 'title',\n          value: 'value',\n          children: 'children'\n        }\n      },\n      option: {\n        height: 'auto',\n        calcHeight: 80,\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        dialogType: 'drawer',\n        dialogClickModal: false,\n        column: [{\n          label: \"登录账号\",\n          prop: \"account\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属租户\",\n          prop: \"tenantName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户姓名\",\n          prop: \"realName\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属角色\",\n          prop: \"roleName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"所属部门\",\n          prop: \"deptName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          prop: \"userTypeName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          search: true,\n          hide: true,\n          display: false,\n          prop: \"userType\",\n          rules: [{\n            required: true,\n            message: \"请选择用户平台\",\n            trigger: \"blur\"\n          }]\n        }],\n        group: [{\n          label: '基础信息',\n          prop: 'baseInfo',\n          icon: 'el-icon-user-solid',\n          column: [{\n            label: \"所属租户\",\n            prop: \"tenantId\",\n            type: \"tree\",\n            dicUrl: \"/api/blade-system/tenant/select\",\n            props: {\n              label: \"tenantName\",\n              value: \"tenantId\"\n            },\n            hide: !website.tenantMode,\n            addDisplay: website.tenantMode,\n            editDisplay: website.tenantMode,\n            viewDisplay: website.tenantMode,\n            rules: [{\n              required: true,\n              message: \"请输入所属租户\",\n              trigger: \"click\"\n            }],\n            span: 24\n          }, {\n            label: \"登录账号\",\n            prop: \"account\",\n            rules: [{\n              required: true,\n              message: \"请输入登录账号\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"用户平台\",\n            type: \"select\",\n            dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            dataType: \"number\",\n            slot: true,\n            prop: \"userType\",\n            rules: [{\n              required: true,\n              message: \"请选择用户平台\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: '密码',\n            prop: 'password',\n            hide: true,\n            editDisplay: false,\n            viewDisplay: false,\n            rules: [{\n              required: true,\n              validator: validatePass,\n              trigger: 'blur'\n            }]\n          }, {\n            label: '确认密码',\n            prop: 'password2',\n            hide: true,\n            editDisplay: false,\n            viewDisplay: false,\n            rules: [{\n              required: true,\n              validator: validatePass2,\n              trigger: 'blur'\n            }]\n          }]\n        }, {\n          label: '详细信息',\n          prop: 'detailInfo',\n          icon: 'el-icon-s-order',\n          column: [{\n            label: \"用户昵称\",\n            prop: \"name\",\n            hide: true,\n            rules: [{\n              required: true,\n              message: \"请输入用户昵称\",\n              trigger: \"blur\"\n            }]\n          }, {\n            label: \"用户姓名\",\n            prop: \"realName\",\n            rules: [{\n              required: true,\n              message: \"请输入用户姓名\",\n              trigger: \"blur\"\n            }, {\n              min: 2,\n              max: 5,\n              message: '姓名长度在2到5个字符'\n            }]\n          }, {\n            label: \"手机号码\",\n            prop: \"phone\",\n            overHidden: true\n          }, {\n            label: \"电子邮箱\",\n            prop: \"email\",\n            hide: true,\n            overHidden: true\n          }, {\n            label: \"用户性别\",\n            prop: \"sex\",\n            type: \"select\",\n            dicData: [{\n              label: \"男\",\n              value: 1\n            }, {\n              label: \"女\",\n              value: 2\n            }, {\n              label: \"未知\",\n              value: 3\n            }],\n            hide: true\n          }, {\n            label: \"用户生日\",\n            type: \"date\",\n            prop: \"birthday\",\n            format: \"yyyy-MM-dd hh:mm:ss\",\n            valueFormat: \"yyyy-MM-dd hh:mm:ss\",\n            hide: true\n          }, {\n            label: \"账号状态\",\n            prop: \"statusName\",\n            hide: true,\n            display: false\n          }]\n        }, {\n          label: '职责信息',\n          prop: 'dutyInfo',\n          icon: 'el-icon-s-custom',\n          column: [{\n            label: \"用户编号\",\n            prop: \"code\"\n          }, {\n            label: \"所属角色\",\n            prop: \"roleId\",\n            multiple: true,\n            type: \"tree\",\n            dicData: [],\n            props: {\n              label: \"title\"\n            },\n            checkStrictly: true,\n            slot: true,\n            rules: [{\n              required: true,\n              message: \"请选择所属角色\",\n              trigger: \"click\"\n            }]\n          }, {\n            label: \"所属部门\",\n            prop: \"deptId\",\n            type: \"tree\",\n            multiple: true,\n            dicData: [],\n            props: {\n              label: \"title\"\n            },\n            checkStrictly: true,\n            slot: true,\n            rules: [{\n              required: true,\n              message: \"请选择所属部门\",\n              trigger: \"click\"\n            }]\n          }, {\n            label: \"所属岗位\",\n            prop: \"postId\",\n            type: \"tree\",\n            multiple: true,\n            dicData: [],\n            props: {\n              label: \"postName\",\n              value: \"id\"\n            },\n            rules: [{\n              required: true,\n              message: \"请选择所属岗位\",\n              trigger: \"click\"\n            }]\n          }]\n        }]\n      },\n      data: [],\n      platformQuery: {},\n      platformSelectionList: [],\n      platformData: [],\n      platformForm: {},\n      platformOption: {\n        tip: false,\n        searchShow: true,\n        searchMenuSpan: 6,\n        border: true,\n        index: true,\n        selection: true,\n        viewBtn: true,\n        dialogClickModal: false,\n        menuWidth: 120,\n        editBtnText: '配置',\n        column: [{\n          label: \"登录账号\",\n          prop: \"account\",\n          search: true,\n          display: false\n        }, {\n          label: \"所属租户\",\n          prop: \"tenantName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户姓名\",\n          prop: \"realName\",\n          search: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          prop: \"userTypeName\",\n          slot: true,\n          display: false\n        }, {\n          label: \"用户平台\",\n          type: \"select\",\n          dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          dataType: \"number\",\n          search: true,\n          hide: true,\n          display: false,\n          prop: \"userType\",\n          rules: [{\n            required: true,\n            message: \"请选择用户平台\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"用户拓展\",\n          prop: \"userExt\",\n          type: \"textarea\",\n          minRows: 8,\n          span: 24,\n          overHidden: true,\n          row: true,\n          hide: true\n        }]\n      },\n      excelForm: {},\n      excelOption: {\n        submitBtn: false,\n        emptyBtn: false,\n        column: [{\n          label: '模板上传',\n          prop: 'excelFile',\n          type: 'upload',\n          drag: true,\n          loadText: '模板上传中，请稍等',\n          span: 24,\n          propsHttp: {\n            res: 'data'\n          },\n          tip: '请上传 .xls,.xlsx 标准格式文件',\n          action: \"/api/blade-user/import-user\"\n        }, {\n          label: \"数据覆盖\",\n          prop: \"isCovered\",\n          type: \"switch\",\n          align: \"center\",\n          width: 80,\n          dicData: [{\n            label: \"否\",\n            value: 0\n          }, {\n            label: \"是\",\n            value: 1\n          }],\n          value: 0,\n          slot: true,\n          rules: [{\n            required: true,\n            message: \"请选择是否覆盖\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: '模板下载',\n          prop: 'excelTemplate',\n          formslot: true,\n          span: 24\n        }]\n      }\n    };\n  },\n  watch: {\n    'form.tenantId': function formTenantId() {\n      if (this.form.tenantId !== '' && this.initFlag) {\n        this.initData(this.form.tenantId);\n      }\n    },\n    'excelForm.isCovered': function excelFormIsCovered() {\n      if (this.excelForm.isCovered !== '') {\n        var column = this.findObject(this.excelOption.column, \"excelFile\");\n        column.action = \"/api/blade-user/import-user?isCovered=\".concat(this.excelForm.isCovered);\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"userInfo\", \"permission\"])), {}, {\n    permissionList: function permissionList() {\n      return {\n        addBtn: this.vaildData(this.permission.user_add, false),\n        viewBtn: this.vaildData(this.permission.user_view, false),\n        delBtn: this.vaildData(this.permission.user_delete, false),\n        editBtn: this.vaildData(this.permission.user_edit, false)\n      };\n    },\n    platformPermissionList: function platformPermissionList() {\n      return {\n        addBtn: false,\n        viewBtn: false,\n        delBtn: false,\n        editBtn: this.vaildData(this.permission.user_edit, false)\n      };\n    },\n    ids: function ids() {\n      var ids = [];\n      this.selectionList.forEach(function (ele) {\n        ids.push(ele.id);\n      });\n      return ids.join(\",\");\n    }\n  }),\n  mounted: function mounted() {\n    // 非租户模式默认加载管理组数据\n    if (!website.tenantMode) {\n      this.initData(website.tenantId);\n    }\n  },\n  methods: {\n    nodeClick: function nodeClick(data) {\n      this.treeDeptId = data.id;\n      this.page.currentPage = 1;\n      this.onLoad(this.page);\n    },\n    initData: function initData(tenantId) {\n      var _this2 = this;\n      getRoleTree(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"roleId\");\n        column.dicData = res.data.data;\n      });\n      getDeptTree(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"deptId\");\n        column.dicData = res.data.data;\n      });\n      getPostList(tenantId).then(function (res) {\n        var column = _this2.findObject(_this2.option.group, \"postId\");\n        column.dicData = res.data.data;\n      });\n    },\n    submitRole: function submitRole() {\n      var _this3 = this;\n      var roleList = this.$refs.treeRole.getCheckedKeys().join(\",\");\n      grant(this.ids, roleList).then(function () {\n        _this3.roleBox = false;\n        _this3.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this3.onLoad(_this3.page);\n      });\n    },\n    rowSave: function rowSave(row, done, loading) {\n      var _this4 = this;\n      row.deptId = row.deptId.join(\",\");\n      row.roleId = row.roleId.join(\",\");\n      row.postId = row.postId.join(\",\");\n      add(row).then(function () {\n        _this4.initFlag = false;\n        _this4.onLoad(_this4.page);\n        _this4.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowUpdate: function rowUpdate(row, index, done, loading) {\n      var _this5 = this;\n      row.deptId = row.deptId.join(\",\");\n      row.roleId = row.roleId.join(\",\");\n      row.postId = row.postId.join(\",\");\n      update(row).then(function () {\n        _this5.initFlag = false;\n        _this5.onLoad(_this5.page);\n        _this5.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    rowDel: function rowDel(row) {\n      var _this6 = this;\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(row.id);\n      }).then(function () {\n        _this6.onLoad(_this6.page);\n        _this6.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    searchReset: function searchReset() {\n      this.query = {};\n      this.treeDeptId = '';\n      this.onLoad(this.page);\n    },\n    searchChange: function searchChange(params, done) {\n      this.query = params;\n      this.page.currentPage = 1;\n      this.onLoad(this.page, params);\n      done();\n    },\n    selectionChange: function selectionChange(list) {\n      this.selectionList = list;\n    },\n    selectionClear: function selectionClear() {\n      this.selectionList = [];\n      this.$refs.crud.toggleSelection();\n    },\n    handleDelete: function handleDelete() {\n      var _this7 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择数据删除?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return remove(_this7.ids);\n      }).then(function () {\n        _this7.onLoad(_this7.page);\n        _this7.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this7.$refs.crud.toggleSelection();\n      });\n    },\n    handleReset: function handleReset() {\n      var _this8 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.$confirm(\"确定将选择账号密码重置为123456?\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return resetPassword(_this8.ids);\n      }).then(function () {\n        _this8.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        _this8.$refs.crud.toggleSelection();\n      });\n    },\n    handleGrant: function handleGrant() {\n      var _this9 = this;\n      if (this.selectionList.length === 0) {\n        this.$message.warning(\"请选择至少一条数据\");\n        return;\n      }\n      this.roleTreeObj = [];\n      if (this.selectionList.length === 1) {\n        this.roleTreeObj = this.selectionList[0].roleId.split(\",\");\n      }\n      getRoleTree().then(function (res) {\n        _this9.roleGrantList = res.data.data;\n        _this9.roleBox = true;\n      });\n    },\n    handlePlatform: function handlePlatform() {\n      this.platformBox = true;\n    },\n    handleLock: function handleLock() {\n      var _this10 = this;\n      this.$confirm(\"确定将选择账号解封？\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return unlock(_this10.ids);\n      }).then(function () {\n        _this10.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n      });\n    },\n    handleImport: function handleImport() {\n      this.excelBox = true;\n    },\n    uploadAfter: function uploadAfter(res, done, loading, column) {\n      window.console.log(column);\n      this.excelBox = false;\n      this.refreshChange();\n      done();\n    },\n    handleExport: function handleExport() {\n      var _this11 = this;\n      this.$confirm(\"是否导出用户数据?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        window.open(\"/api/blade-user/export-user?\".concat(_this11.website.tokenHeader, \"=\").concat(getToken(), \"&account=\").concat(_this11.search.account, \"&realName=\").concat(_this11.search.realName));\n      });\n    },\n    handleTemplate: function handleTemplate() {\n      window.open(\"/api/blade-user/export-template?\".concat(this.website.tokenHeader, \"=\").concat(getToken()));\n    },\n    beforeOpen: function beforeOpen(done, type) {\n      var _this12 = this;\n      if ([\"edit\", \"view\"].includes(type)) {\n        getUser(this.form.id).then(function (res) {\n          _this12.form = res.data.data;\n          if (_this12.form.hasOwnProperty(\"deptId\")) {\n            _this12.form.deptId = _this12.form.deptId.split(\",\");\n          }\n          if (_this12.form.hasOwnProperty(\"roleId\")) {\n            _this12.form.roleId = _this12.form.roleId.split(\",\");\n          }\n          if (_this12.form.hasOwnProperty(\"postId\")) {\n            _this12.form.postId = _this12.form.postId.split(\",\");\n          }\n        });\n      }\n      this.initFlag = true;\n      done();\n    },\n    currentChange: function currentChange(currentPage) {\n      this.page.currentPage = currentPage;\n    },\n    sizeChange: function sizeChange(pageSize) {\n      this.page.pageSize = pageSize;\n    },\n    refreshChange: function refreshChange() {\n      this.onLoad(this.page, this.query);\n    },\n    onLoad: function onLoad(page) {\n      var _this13 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.loading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(function (res) {\n        var data = res.data.data;\n        _this13.page.total = data.total;\n        _this13.data = data.records;\n        _this13.loading = false;\n        _this13.selectionClear();\n      });\n    },\n    platformRowUpdate: function platformRowUpdate(row, index, done, loading) {\n      var _this14 = this;\n      updatePlatform(row.id, row.userType, row.userExt).then(function () {\n        _this14.platformOnLoad(_this14.platformPage);\n        _this14.$message({\n          type: \"success\",\n          message: \"操作成功!\"\n        });\n        done();\n      }, function (error) {\n        window.console.log(error);\n        loading();\n      });\n    },\n    platformBeforeOpen: function platformBeforeOpen(done, type) {\n      var _this15 = this;\n      if ([\"edit\", \"view\"].includes(type)) {\n        getUserPlatform(this.platformForm.id).then(function (res) {\n          _this15.platformForm = res.data.data;\n        });\n      }\n      done();\n    },\n    platformSearchReset: function platformSearchReset() {\n      this.platformQuery = {};\n      this.platformOnLoad(this.platformPage);\n    },\n    platformSearchChange: function platformSearchChange(params, done) {\n      this.platformQuery = params;\n      this.platformPage.currentPage = 1;\n      this.platformOnLoad(this.platformPage, params);\n      done();\n    },\n    platformSelectionChange: function platformSelectionChange(list) {\n      this.platformSelectionList = list;\n    },\n    platformSelectionClear: function platformSelectionClear() {\n      this.platformSelectionList = [];\n      this.$refs.platformCrud.toggleSelection();\n    },\n    platformCurrentChange: function platformCurrentChange(currentPage) {\n      this.platformPage.currentPage = currentPage;\n    },\n    platformSizeChange: function platformSizeChange(pageSize) {\n      this.platformPage.pageSize = pageSize;\n    },\n    platformRefreshChange: function platformRefreshChange() {\n      this.platformOnLoad(this.platformPage, this.platformQuery);\n    },\n    platformOnLoad: function platformOnLoad(page) {\n      var _this16 = this;\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.platformLoading = true;\n      getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(function (res) {\n        var data = res.data.data;\n        _this16.platformPage.total = data.total;\n        _this16.platformData = data.records;\n        _this16.platformLoading = false;\n        _this16.selectionClear();\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;AAwKA,SACAA,SACAC,SACAC,iBACAC,QACAC,QACAC,gBACAC,KACAC,OACAC,6BACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAC;IAAA;IACA;MACA;QACAC;MACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAH;QACAC;QACAC;MACA;MACAE;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;UACA;UACAC;YACAC;cACA,uCACAC;gBACAC;cAAA;YAEA;UACA;QACA;QACAC;QACAC;QACAC;QACAjB;UACAkB;UACAjB;UACAC;UACAiB;QACA;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,SACA;UACA/B;UACAgC;UACAlD;UACAmD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAgC;UACAlD;UACAmD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAmC;UACAC;UACArC;YACAC;YACAC;UACA;UACAoC;UACAvD;UACAwD;UACAL;UACAD;UACAO;YACAC;YACAC;YACAC;UACA;QACA,EACA;QACAC,QACA;UACA3C;UACAgC;UACAY;UACAb,SACA;YACA/B;YACAgC;YACAG;YACAC;YACArC;cACAC;cACAC;YACA;YACAqC;YACAO;YACAC;YACAC;YACAR;cACAC;cACAC;cACAC;YACA;YACAM;UACA,GACA;YACAhD;YACAgC;YACAO;cACAC;cACAC;cACAC;YACA;UACA,GACA;YACA1C;YACAmC;YACAC;YACArC;cACAC;cACAC;YACA;YACAoC;YACAH;YACAF;YACAO;cACAC;cACAC;cACAC;YACA;UACA,GACA;YACA1C;YACAgC;YACAM;YACAQ;YACAC;YACAR;cAAAC;cAAAS;cAAAP;YAAA;UACA,GACA;YACA1C;YACAgC;YACAM;YACAQ;YACAC;YACAR;cAAAC;cAAAS;cAAAP;YAAA;UACA;QAEA,GACA;UACA1C;UACAgC;UACAY;UACAb,SACA;YACA/B;YACAgC;YACAM;YACAC;cACAC;cACAC;cACAC;YACA;UACA,GACA;YACA1C;YACAgC;YACAO;cACAC;cACAC;cACAC;YACA;cACAQ;cACAC;cACAV;YACA;UACA,GACA;YACAzC;YACAgC;YACAoB;UACA,GACA;YACApD;YACAgC;YACAM;YACAc;UACA,GACA;YACApD;YACAgC;YACAG;YACAkB,UACA;cACArD;cACAC;YACA,GACA;cACAD;cACAC;YACA,GACA;cACAD;cACAC;YACA,EACA;YACAqC;UACA,GACA;YACAtC;YACAmC;YACAH;YACAsB;YACAC;YACAjB;UACA,GACA;YACAtC;YACAgC;YACAM;YACAL;UACA;QAEA,GACA;UACAjC;UACAgC;UACAY;UACAb,SACA;YACA/B;YACAgC;UACA,GACA;YACAhC;YACAgC;YACAwB;YACArB;YACAkB;YACAtD;cACAC;YACA;YACAyD;YACAvB;YACAK;cACAC;cACAC;cACAC;YACA;UACA,GACA;YACA1C;YACAgC;YACAG;YACAqB;YACAH;YACAtD;cACAC;YACA;YACAyD;YACAvB;YACAK;cACAC;cACAC;cACAC;YACA;UACA,GACA;YACA1C;YACAgC;YACAG;YACAqB;YACAH;YACAtD;cACAC;cACAC;YACA;YACAsC;cACAC;cACAC;cACAC;YACA;UACA;QAEA;MAEA;MACA/D;MACA+E;MACAC;MACAC;MACAC;MACAC;QACAxC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAE;QACAiC;QACAC;QACAjC,SACA;UACA/B;UACAgC;UACAlD;UACAmD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAgC;UACAlD;UACAmD;QACA,GACA;UACAjC;UACAgC;UACAE;UACAD;QACA,GACA;UACAjC;UACAmC;UACAC;UACArC;YACAC;YACAC;UACA;UACAoC;UACAvD;UACAwD;UACAL;UACAD;UACAO;YACAC;YACAC;YACAC;UACA;QACA,GACA;UACA1C;UACAgC;UACAG;UACA8B;UACAjB;UACAI;UACAc;UACA5B;QACA;MAEA;MACA6B;MACAC;QACAC;QACAC;QACAvC,SACA;UACA/B;UACAgC;UACAG;UACAoC;UACAC;UACAxB;UACAyB;YACAC;UACA;UACApD;UACAqD;QACA,GACA;UACA3E;UACAgC;UACAG;UACAyC;UACAC;UACAxB,UACA;YACArD;YACAC;UACA,GACA;YACAD;YACAC;UACA,EACA;UACAA;UACAiC;UACAK,QACA;YACAC;YACAC;YACAC;UACA;QAEA,GACA;UACA1C;UACAgC;UACA8C;UACA9B;QACA;MAEA;IACA;EACA;EACA+B;IACA;MACA;QACA;MACA;IACA;IACA;MACA;QACA;QACAhD;MACA;IACA;EACA;EACAiD,0CACAC;IACAC;MACA;QACApE;QACAc;QACAuD;QACAC;MACA;IACA;IACAC;MACA;QACAvE;QACAc;QACAuD;QACAC;MACA;IACA;IACAE;MACA;MACA;QACAA;MACA;MACA;IACA;EAAA,EACA;EACAC;IACA;IACA;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;IACA;IACAC;MAAA;MACAC;QACA;QACA5D;MACA;MACA6D;QACA;QACA7D;MACA;MACA8D;QACA;QACA9D;MACA;IACA;IACA+D;MAAA;MACA;MACArH;QACA;QACA;UACA0D;UACAM;QACA;QACA;MACA;IACA;IACAsD;MAAA;MACA7B;MACAA;MACAA;MACA1F;QACA;QACA;QACA;UACA2D;UACAM;QACA;QACAuD;MACA;QACAC;QACA5G;MACA;IACA;IACA6G;MAAA;MACAhC;MACAA;MACAA;MACA5F;QACA;QACA;QACA;UACA6D;UACAM;QACA;QACAuD;MACA;QACAC;QACA5G;MACA;IACA;IACA8G;MAAA;MACA;QACAC;QACAC;QACAlE;MACA,GACAmE;QACA;MACA,GACAA;QACA;QACA;UACAnE;UACAM;QACA;MACA;IACA;IACA8D;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACAR;IACA;IACAS;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MAAA;MACA;QACA;QACA;MACA;MACA;QACAP;QACAC;QACAlE;MACA,GACAmE;QACA;MACA,GACAA;QACA;QACA;UACAnE;UACAM;QACA;QACA;MACA;IACA;IACAmE;MAAA;MACA;QACA;QACA;MACA;MACA;QACAR;QACAC;QACAlE;MACA,GACAmE;QACA;MACA,GACAA;QACA;UACAnE;UACAM;QACA;QACA;MACA;IACA;IACAoE;MAAA;MACA;QACA;QACA;MACA;MACA;MACA;QACA;MACA;MACAlB;QACA;QACA;MACA;IACA;IACAmB;MACA;IACA;IACAC;MAAA;MACA;QACAX;QACAC;QACAlE;MACA,GACAmE;QACA;MACA,GACAA;QACA;UACAnE;UACAM;QACA;MACA;IACA;IACAuE;MACA;IACA;IACAC;MACAhB;MACA;MACA;MACAD;IACA;IACAkB;MAAA;MACA;QACAd;QACAC;QACAlE;MACA;QACA8D;MACA;IACA;IACAkB;MACAlB;IACA;IACAmB;MAAA;MACA;QACAjJ;UACA;UACA;YACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;QACA;MACA;MACA;MACA6H;IACA;IACAqB;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAtJ;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAuJ;MAAA;MACAlJ;QACA;QACA;UACA4D;UACAM;QACA;QACAuD;MACA;QACAC;QACA5G;MACA;IACA;IACAqI;MAAA;MACA;QACAtJ;UACA;QACA;MACA;MACA4H;IACA;IACA2B;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA5B;IACA;IACA6B;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MAAA;MACA;MACAhK;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["getList","getUser","getUserPlatform","remove","update","updatePlatform","add","grant","resetPassword","data","callback","form","search","roleBox","excelBox","platformBox","initFlag","selectionList","query","loading","platformLoading","page","pageSize","currentPage","total","platformPage","init","roleTree","deptTree","props","label","value","roleGrantList","roleTreeObj","treeDeptId","treeData","treeOption","nodeKey","lazy","treeLoad","getDeptLazyTree","resolve","item","leaf","addBtn","menu","size","labelText","children","option","height","calcHeight","tip","searchShow","searchMenuSpan","border","index","selection","viewBtn","dialogType","dialogClickModal","column","prop","display","slot","type","dicUrl","dataType","hide","rules","required","message","trigger","group","icon","addDisplay","editDisplay","viewDisplay","span","validator","min","max","overHidden","dicData","format","valueFormat","multiple","checkStrictly","platformQuery","platformSelectionList","platformData","platformForm","platformOption","menuWidth","editBtnText","minRows","row","excelForm","excelOption","submitBtn","emptyBtn","drag","loadText","propsHttp","res","action","align","width","formslot","watch","computed","mapGetters","permissionList","delBtn","editBtn","platformPermissionList","ids","mounted","methods","nodeClick","initData","getRoleTree","getDeptTree","getPostList","submitRole","rowSave","done","window","rowUpdate","rowDel","confirmButtonText","cancelButtonText","then","searchReset","searchChange","selectionChange","selectionClear","handleDelete","handleReset","handleGrant","handlePlatform","handleLock","handleImport","uploadAfter","handleExport","handleTemplate","beforeOpen","currentChange","sizeChange","refreshChange","onLoad","platformRowUpdate","platformBeforeOpen","platformSearchReset","platformSearchChange","platformSelectionChange","platformSelectionClear","platformCurrentChange","platformSizeChange","platformRefreshChange","platformOnLoad"],"sourceRoot":"src/views/system","sources":["user.vue"],"sourcesContent":["<template>\r\n  <el-row>\r\n    <el-col :span=\"5\">\r\n      <div class=\"box\">\r\n        <el-scrollbar>\r\n          <basic-container>\r\n            <avue-tree :option=\"treeOption\" :data=\"treeData\" @node-click=\"nodeClick\"/>\r\n          </basic-container>\r\n        </el-scrollbar>\r\n      </div>\r\n    </el-col>\r\n    <el-col :span=\"19\">\r\n      <basic-container>\r\n        <avue-crud :option=\"option\"\r\n                   :search.sync=\"search\"\r\n                   :table-loading=\"loading\"\r\n                   :data=\"data\"\r\n                   ref=\"crud\"\r\n                   v-model=\"form\"\r\n                   :permission=\"permissionList\"\r\n                   @row-del=\"rowDel\"\r\n                   @row-update=\"rowUpdate\"\r\n                   @row-save=\"rowSave\"\r\n                   :before-open=\"beforeOpen\"\r\n                   :page.sync=\"page\"\r\n                   @search-change=\"searchChange\"\r\n                   @search-reset=\"searchReset\"\r\n                   @selection-change=\"selectionChange\"\r\n                   @current-change=\"currentChange\"\r\n                   @size-change=\"sizeChange\"\r\n                   @refresh-change=\"refreshChange\"\r\n                   @on-load=\"onLoad\">\r\n          <template slot=\"menuLeft\">\r\n            <el-button type=\"danger\"\r\n                       size=\"small\"\r\n                       plain\r\n                       icon=\"el-icon-delete\"\r\n                       v-if=\"permission.user_delete\"\r\n                       @click=\"handleDelete\">删 除\r\n            </el-button>\r\n            <el-button type=\"info\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"permission.user_role\"\r\n                       icon=\"el-icon-user\"\r\n                       @click=\"handleGrant\">角色配置\r\n            </el-button>\r\n            <el-button type=\"info\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"permission.user_reset\"\r\n                       icon=\"el-icon-refresh\"\r\n                       @click=\"handleReset\">密码重置\r\n            </el-button>\r\n            <el-button type=\"info\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"userInfo.role_name.includes('admin')\"\r\n                       icon=\"el-icon-setting\"\r\n                       @click=\"handlePlatform\">平台配置\r\n            </el-button>\r\n            <el-button type=\"info\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"userInfo.role_name.includes('admin')\"\r\n                       icon=\"el-icon-coordinate\"\r\n                       @click=\"handleLock\">账号解封\r\n            </el-button>\r\n            <el-button type=\"success\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"userInfo.role_name.includes('admin')\"\r\n                       icon=\"el-icon-upload2\"\r\n                       @click=\"handleImport\">导入\r\n            </el-button>\r\n            <el-button type=\"warning\"\r\n                       size=\"small\"\r\n                       plain\r\n                       v-if=\"userInfo.role_name.includes('admin')\"\r\n                       icon=\"el-icon-download\"\r\n                       @click=\"handleExport\">导出\r\n            </el-button>\r\n          </template>\r\n          <template slot-scope=\"{row}\"\r\n                    slot=\"tenantName\">\r\n            <el-tag>{{row.tenantName}}</el-tag>\r\n          </template>\r\n          <template slot-scope=\"{row}\"\r\n                    slot=\"roleName\">\r\n            <el-tag>{{row.roleName}}</el-tag>\r\n          </template>\r\n          <template slot-scope=\"{row}\"\r\n                    slot=\"deptName\">\r\n            <el-tag>{{row.deptName}}</el-tag>\r\n          </template>\r\n          <template slot-scope=\"{row}\"\r\n                    slot=\"userTypeName\">\r\n            <el-tag>{{row.userTypeName}}</el-tag>\r\n          </template>\r\n        </avue-crud>\r\n        <el-dialog title=\"用户角色配置\"\r\n                   append-to-body\r\n                   :visible.sync=\"roleBox\"\r\n                   width=\"345px\">\r\n\r\n          <el-tree :data=\"roleGrantList\"\r\n                   show-checkbox\r\n                   check-strictly\r\n                   default-expand-all\r\n                   node-key=\"id\"\r\n                   ref=\"treeRole\"\r\n                   :default-checked-keys=\"roleTreeObj\"\r\n                   :props=\"props\">\r\n          </el-tree>\r\n\r\n          <span slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"roleBox = false\">取 消</el-button>\r\n            <el-button type=\"primary\"\r\n                       @click=\"submitRole\">确 定</el-button>\r\n          </span>\r\n        </el-dialog>\r\n        <el-dialog title=\"用户数据导入\"\r\n                   append-to-body\r\n                   :visible.sync=\"excelBox\"\r\n                   width=\"555px\">\r\n          <avue-form :option=\"excelOption\" v-model=\"excelForm\" :upload-after=\"uploadAfter\">\r\n            <template slot=\"excelTemplate\">\r\n              <el-button type=\"primary\" @click=\"handleTemplate\">\r\n                点击下载<i class=\"el-icon-download el-icon--right\"></i>\r\n              </el-button>\r\n            </template>\r\n          </avue-form>\r\n        </el-dialog>\r\n        <el-dialog title=\"用户平台配置\"\r\n                   append-to-body\r\n                   :visible.sync=\"platformBox\">\r\n          <avue-crud :option=\"platformOption\"\r\n                     :table-loading=\"platformLoading\"\r\n                     :data=\"platformData\"\r\n                     ref=\"platformCrud\"\r\n                     v-model=\"platformForm\"\r\n                     :before-open=\"platformBeforeOpen\"\r\n                     :page.sync=\"platformPage\"\r\n                     :permission=\"platformPermissionList\"\r\n                     @row-update=\"platformRowUpdate\"\r\n                     @search-change=\"platformSearchChange\"\r\n                     @search-reset=\"platformSearchReset\"\r\n                     @selection-change=\"platformSelectionChange\"\r\n                     @current-change=\"platformCurrentChange\"\r\n                     @size-change=\"platformSizeChange\"\r\n                     @refresh-change=\"platformRefreshChange\"\r\n                     @on-load=\"platformOnLoad\">\r\n            <template slot-scope=\"{row}\"\r\n                      slot=\"tenantName\">\r\n              <el-tag>{{row.tenantName}}</el-tag>\r\n            </template>\r\n            <template slot-scope=\"{row}\"\r\n                      slot=\"userTypeName\">\r\n              <el-tag>{{row.userTypeName}}</el-tag>\r\n            </template>\r\n          </avue-crud>\r\n        </el-dialog>\r\n      </basic-container>\r\n    </el-col>\r\n  </el-row>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getList,\r\n  getUser,\r\n  getUserPlatform,\r\n  remove,\r\n  update,\r\n  updatePlatform,\r\n  add,\r\n  grant,\r\n  resetPassword, unlock\r\n} from \"@/api/system/user\";\r\n  import {getDeptTree, getDeptLazyTree} from \"@/api/system/dept\";\r\n  import {getRoleTree} from \"@/api/system/role\";\r\n  import {getPostList} from \"@/api/system/post\";\r\n  import {mapGetters} from \"vuex\";\r\n  import website from '@/config/website';\r\n  import {getToken} from '@/util/auth';\r\n\r\n  export default {\r\n    data() {\r\n      const validatePass = (rule, value, callback) => {\r\n        if (value === '') {\r\n          callback(new Error('请输入密码'));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n      const validatePass2 = (rule, value, callback) => {\r\n        if (value === '') {\r\n          callback(new Error('请再次输入密码'));\r\n        } else if (value !== this.form.password) {\r\n          callback(new Error('两次输入密码不一致!'));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n      return {\r\n        form: {},\r\n        search:{},\r\n        roleBox: false,\r\n        excelBox: false,\r\n        platformBox: false,\r\n        initFlag: true,\r\n        selectionList: [],\r\n        query: {},\r\n        loading: true,\r\n        platformLoading: false,\r\n        page: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        platformPage: {\r\n          pageSize: 10,\r\n          currentPage: 1,\r\n          total: 0\r\n        },\r\n        init: {\r\n          roleTree: [],\r\n          deptTree: [],\r\n        },\r\n        props: {\r\n          label: \"title\",\r\n          value: \"key\"\r\n        },\r\n        roleGrantList: [],\r\n        roleTreeObj: [],\r\n        treeDeptId: '',\r\n        treeData: [],\r\n        treeOption: {\r\n          nodeKey: 'id',\r\n          lazy: true,\r\n          treeLoad: function (node, resolve) {\r\n            const parentId = (node.level === 0) ? 0 : node.data.id;\r\n            getDeptLazyTree(parentId).then(res => {\r\n              resolve(res.data.data.map(item => {\r\n                return {\r\n                  ...item,\r\n                  leaf: !item.hasChildren\r\n                }\r\n              }))\r\n            });\r\n          },\r\n          addBtn: false,\r\n          menu: false,\r\n          size: 'small',\r\n          props: {\r\n            labelText: '标题',\r\n            label: 'title',\r\n            value: 'value',\r\n            children: 'children'\r\n          }\r\n        },\r\n        option: {\r\n          height: 'auto',\r\n          calcHeight: 80,\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          border: true,\r\n          index: true,\r\n          selection: true,\r\n          viewBtn: true,\r\n          dialogType: 'drawer',\r\n          dialogClickModal: false,\r\n          column: [\r\n            {\r\n              label: \"登录账号\",\r\n              prop: \"account\",\r\n              search: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"所属租户\",\r\n              prop: \"tenantName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户姓名\",\r\n              prop: \"realName\",\r\n              search: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"所属角色\",\r\n              prop: \"roleName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"所属部门\",\r\n              prop: \"deptName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户平台\",\r\n              prop: \"userTypeName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户平台\",\r\n              type: \"select\",\r\n              dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              dataType: \"number\",\r\n              search: true,\r\n              hide: true,\r\n              display: false,\r\n              prop: \"userType\",\r\n              rules: [{\r\n                required: true,\r\n                message: \"请选择用户平台\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n          ],\r\n          group: [\r\n            {\r\n              label: '基础信息',\r\n              prop: 'baseInfo',\r\n              icon: 'el-icon-user-solid',\r\n              column: [\r\n                {\r\n                  label: \"所属租户\",\r\n                  prop: \"tenantId\",\r\n                  type: \"tree\",\r\n                  dicUrl: \"/api/blade-system/tenant/select\",\r\n                  props: {\r\n                    label: \"tenantName\",\r\n                    value: \"tenantId\"\r\n                  },\r\n                  hide: !website.tenantMode,\r\n                  addDisplay: website.tenantMode,\r\n                  editDisplay: website.tenantMode,\r\n                  viewDisplay: website.tenantMode,\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请输入所属租户\",\r\n                    trigger: \"click\"\r\n                  }],\r\n                  span: 24,\r\n                },\r\n                {\r\n                  label: \"登录账号\",\r\n                  prop: \"account\",\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请输入登录账号\",\r\n                    trigger: \"blur\"\r\n                  }],\r\n                },\r\n                {\r\n                  label: \"用户平台\",\r\n                  type: \"select\",\r\n                  dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\r\n                  props: {\r\n                    label: \"dictValue\",\r\n                    value: \"dictKey\"\r\n                  },\r\n                  dataType: \"number\",\r\n                  slot: true,\r\n                  prop: \"userType\",\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请选择用户平台\",\r\n                    trigger: \"blur\"\r\n                  }]\r\n                },\r\n                {\r\n                  label: '密码',\r\n                  prop: 'password',\r\n                  hide: true,\r\n                  editDisplay: false,\r\n                  viewDisplay: false,\r\n                  rules: [{required: true, validator: validatePass, trigger: 'blur'}]\r\n                },\r\n                {\r\n                  label: '确认密码',\r\n                  prop: 'password2',\r\n                  hide: true,\r\n                  editDisplay: false,\r\n                  viewDisplay: false,\r\n                  rules: [{required: true, validator: validatePass2, trigger: 'blur'}]\r\n                },\r\n              ]\r\n            },\r\n            {\r\n              label: '详细信息',\r\n              prop: 'detailInfo',\r\n              icon: 'el-icon-s-order',\r\n              column: [\r\n                {\r\n                  label: \"用户昵称\",\r\n                  prop: \"name\",\r\n                  hide: true,\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请输入用户昵称\",\r\n                    trigger: \"blur\"\r\n                  }]\r\n                },\r\n                {\r\n                  label: \"用户姓名\",\r\n                  prop: \"realName\",\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请输入用户姓名\",\r\n                    trigger: \"blur\"\r\n                  }, {\r\n                    min: 2,\r\n                    max: 5,\r\n                    message: '姓名长度在2到5个字符'\r\n                  }]\r\n                },\r\n                {\r\n                  label: \"手机号码\",\r\n                  prop: \"phone\",\r\n                  overHidden: true\r\n                },\r\n                {\r\n                  label: \"电子邮箱\",\r\n                  prop: \"email\",\r\n                  hide: true,\r\n                  overHidden: true\r\n                },\r\n                {\r\n                  label: \"用户性别\",\r\n                  prop: \"sex\",\r\n                  type: \"select\",\r\n                  dicData: [\r\n                    {\r\n                      label: \"男\",\r\n                      value: 1\r\n                    },\r\n                    {\r\n                      label: \"女\",\r\n                      value: 2\r\n                    },\r\n                    {\r\n                      label: \"未知\",\r\n                      value: 3\r\n                    }\r\n                  ],\r\n                  hide: true\r\n                },\r\n                {\r\n                  label: \"用户生日\",\r\n                  type: \"date\",\r\n                  prop: \"birthday\",\r\n                  format: \"yyyy-MM-dd hh:mm:ss\",\r\n                  valueFormat: \"yyyy-MM-dd hh:mm:ss\",\r\n                  hide: true\r\n                },\r\n                {\r\n                  label: \"账号状态\",\r\n                  prop: \"statusName\",\r\n                  hide: true,\r\n                  display: false\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: '职责信息',\r\n              prop: 'dutyInfo',\r\n              icon: 'el-icon-s-custom',\r\n              column: [\r\n                {\r\n                  label: \"用户编号\",\r\n                  prop: \"code\",\r\n                },\r\n                {\r\n                  label: \"所属角色\",\r\n                  prop: \"roleId\",\r\n                  multiple: true,\r\n                  type: \"tree\",\r\n                  dicData: [],\r\n                  props: {\r\n                    label: \"title\"\r\n                  },\r\n                  checkStrictly: true,\r\n                  slot: true,\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请选择所属角色\",\r\n                    trigger: \"click\"\r\n                  }]\r\n                },\r\n                {\r\n                  label: \"所属部门\",\r\n                  prop: \"deptId\",\r\n                  type: \"tree\",\r\n                  multiple: true,\r\n                  dicData: [],\r\n                  props: {\r\n                    label: \"title\"\r\n                  },\r\n                  checkStrictly: true,\r\n                  slot: true,\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请选择所属部门\",\r\n                    trigger: \"click\"\r\n                  }]\r\n                },\r\n                {\r\n                  label: \"所属岗位\",\r\n                  prop: \"postId\",\r\n                  type: \"tree\",\r\n                  multiple: true,\r\n                  dicData: [],\r\n                  props: {\r\n                    label: \"postName\",\r\n                    value: \"id\"\r\n                  },\r\n                  rules: [{\r\n                    required: true,\r\n                    message: \"请选择所属岗位\",\r\n                    trigger: \"click\"\r\n                  }],\r\n                },\r\n              ]\r\n            },\r\n          ]\r\n        },\r\n        data: [],\r\n        platformQuery: {},\r\n        platformSelectionList: [],\r\n        platformData: [],\r\n        platformForm: {},\r\n        platformOption: {\r\n          tip: false,\r\n          searchShow: true,\r\n          searchMenuSpan: 6,\r\n          border: true,\r\n          index: true,\r\n          selection: true,\r\n          viewBtn: true,\r\n          dialogClickModal: false,\r\n          menuWidth: 120,\r\n          editBtnText: '配置',\r\n          column: [\r\n            {\r\n              label: \"登录账号\",\r\n              prop: \"account\",\r\n              search: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"所属租户\",\r\n              prop: \"tenantName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户姓名\",\r\n              prop: \"realName\",\r\n              search: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户平台\",\r\n              prop: \"userTypeName\",\r\n              slot: true,\r\n              display: false\r\n            },\r\n            {\r\n              label: \"用户平台\",\r\n              type: \"select\",\r\n              dicUrl: \"/api/blade-system/dict/dictionary?code=user_type\",\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              dataType: \"number\",\r\n              search: true,\r\n              hide: true,\r\n              display: false,\r\n              prop: \"userType\",\r\n              rules: [{\r\n                required: true,\r\n                message: \"请选择用户平台\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"用户拓展\",\r\n              prop: \"userExt\",\r\n              type: \"textarea\",\r\n              minRows: 8,\r\n              span: 24,\r\n              overHidden: true,\r\n              row: true,\r\n              hide: true,\r\n            },\r\n          ],\r\n        },\r\n        excelForm: {},\r\n        excelOption: {\r\n          submitBtn: false,\r\n          emptyBtn: false,\r\n          column: [\r\n            {\r\n              label: '模板上传',\r\n              prop: 'excelFile',\r\n              type: 'upload',\r\n              drag: true,\r\n              loadText: '模板上传中，请稍等',\r\n              span: 24,\r\n              propsHttp: {\r\n                res: 'data'\r\n              },\r\n              tip: '请上传 .xls,.xlsx 标准格式文件',\r\n              action: \"/api/blade-user/import-user\"\r\n            },\r\n            {\r\n              label: \"数据覆盖\",\r\n              prop: \"isCovered\",\r\n              type: \"switch\",\r\n              align: \"center\",\r\n              width: 80,\r\n              dicData: [\r\n                {\r\n                  label: \"否\",\r\n                  value: 0\r\n                },\r\n                {\r\n                  label: \"是\",\r\n                  value: 1\r\n                }\r\n              ],\r\n              value: 0,\r\n              slot: true,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"请选择是否覆盖\",\r\n                  trigger: \"blur\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              label: '模板下载',\r\n              prop: 'excelTemplate',\r\n              formslot: true,\r\n              span: 24,\r\n            }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    watch: {\r\n      'form.tenantId'() {\r\n        if (this.form.tenantId !== '' && this.initFlag) {\r\n          this.initData(this.form.tenantId);\r\n        }\r\n      },\r\n      'excelForm.isCovered'() {\r\n        if (this.excelForm.isCovered !== '') {\r\n          const column = this.findObject(this.excelOption.column, \"excelFile\");\r\n          column.action = `/api/blade-user/import-user?isCovered=${this.excelForm.isCovered}`;\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      ...mapGetters([\"userInfo\", \"permission\"]),\r\n      permissionList() {\r\n        return {\r\n          addBtn: this.vaildData(this.permission.user_add, false),\r\n          viewBtn: this.vaildData(this.permission.user_view, false),\r\n          delBtn: this.vaildData(this.permission.user_delete, false),\r\n          editBtn: this.vaildData(this.permission.user_edit, false)\r\n        };\r\n      },\r\n      platformPermissionList() {\r\n        return {\r\n          addBtn: false,\r\n          viewBtn: false,\r\n          delBtn: false,\r\n          editBtn: this.vaildData(this.permission.user_edit, false)\r\n        };\r\n      },\r\n      ids() {\r\n        let ids = [];\r\n        this.selectionList.forEach(ele => {\r\n          ids.push(ele.id);\r\n        });\r\n        return ids.join(\",\");\r\n      },\r\n    },\r\n    mounted() {\r\n      // 非租户模式默认加载管理组数据\r\n      if (!website.tenantMode) {\r\n        this.initData(website.tenantId);\r\n      }\r\n    },\r\n    methods: {\r\n      nodeClick(data) {\r\n        this.treeDeptId = data.id;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page);\r\n      },\r\n      initData(tenantId) {\r\n        getRoleTree(tenantId).then(res => {\r\n          const column = this.findObject(this.option.group, \"roleId\");\r\n          column.dicData = res.data.data;\r\n        });\r\n        getDeptTree(tenantId).then(res => {\r\n          const column = this.findObject(this.option.group, \"deptId\");\r\n          column.dicData = res.data.data;\r\n        });\r\n        getPostList(tenantId).then(res => {\r\n          const column = this.findObject(this.option.group, \"postId\");\r\n          column.dicData = res.data.data;\r\n        });\r\n      },\r\n      submitRole() {\r\n        const roleList = this.$refs.treeRole.getCheckedKeys().join(\",\");\r\n        grant(this.ids, roleList).then(() => {\r\n          this.roleBox = false;\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          this.onLoad(this.page);\r\n        });\r\n      },\r\n      rowSave(row, done, loading) {\r\n        row.deptId = row.deptId.join(\",\");\r\n        row.roleId = row.roleId.join(\",\");\r\n        row.postId = row.postId.join(\",\");\r\n        add(row).then(() => {\r\n          this.initFlag = false;\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowUpdate(row, index, done, loading) {\r\n        row.deptId = row.deptId.join(\",\");\r\n        row.roleId = row.roleId.join(\",\");\r\n        row.postId = row.postId.join(\",\");\r\n        update(row).then(() => {\r\n          this.initFlag = false;\r\n          this.onLoad(this.page);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      rowDel(row) {\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(row.id);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      searchReset() {\r\n        this.query = {};\r\n        this.treeDeptId = '';\r\n        this.onLoad(this.page);\r\n      },\r\n      searchChange(params, done) {\r\n        this.query = params;\r\n        this.page.currentPage = 1;\r\n        this.onLoad(this.page, params);\r\n        done();\r\n      },\r\n      selectionChange(list) {\r\n        this.selectionList = list;\r\n      },\r\n      selectionClear() {\r\n        this.selectionList = [];\r\n        this.$refs.crud.toggleSelection();\r\n      },\r\n      handleDelete() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择数据删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return remove(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.onLoad(this.page);\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            this.$refs.crud.toggleSelection();\r\n          });\r\n      },\r\n      handleReset() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.$confirm(\"确定将选择账号密码重置为123456?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return resetPassword(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n            this.$refs.crud.toggleSelection();\r\n          });\r\n      },\r\n      handleGrant() {\r\n        if (this.selectionList.length === 0) {\r\n          this.$message.warning(\"请选择至少一条数据\");\r\n          return;\r\n        }\r\n        this.roleTreeObj = [];\r\n        if (this.selectionList.length === 1) {\r\n          this.roleTreeObj = this.selectionList[0].roleId.split(\",\");\r\n        }\r\n        getRoleTree().then(res => {\r\n          this.roleGrantList = res.data.data;\r\n          this.roleBox = true;\r\n        });\r\n      },\r\n      handlePlatform() {\r\n        this.platformBox = true;\r\n      },\r\n      handleLock() {\r\n        this.$confirm(\"确定将选择账号解封？\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        })\r\n          .then(() => {\r\n            return unlock(this.ids);\r\n          })\r\n          .then(() => {\r\n            this.$message({\r\n              type: \"success\",\r\n              message: \"操作成功!\"\r\n            });\r\n          });\r\n      },\r\n      handleImport() {\r\n        this.excelBox = true;\r\n      },\r\n      uploadAfter(res, done, loading, column) {\r\n        window.console.log(column);\r\n        this.excelBox = false;\r\n        this.refreshChange();\r\n        done();\r\n      },\r\n      handleExport() {\r\n        this.$confirm(\"是否导出用户数据?\", \"提示\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        }).then(() => {\r\n          window.open(`/api/blade-user/export-user?${this.website.tokenHeader}=${getToken()}&account=${this.search.account}&realName=${this.search.realName}`);\r\n        });\r\n      },\r\n      handleTemplate() {\r\n        window.open(`/api/blade-user/export-template?${this.website.tokenHeader}=${getToken()}`);\r\n      },\r\n      beforeOpen(done, type) {\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getUser(this.form.id).then(res => {\r\n            this.form = res.data.data;\r\n            if(this.form.hasOwnProperty(\"deptId\")){\r\n              this.form.deptId = this.form.deptId.split(\",\");\r\n            }\r\n            if(this.form.hasOwnProperty(\"roleId\")){\r\n              this.form.roleId = this.form.roleId.split(\",\");\r\n            }\r\n            if(this.form.hasOwnProperty(\"postId\")){\r\n              this.form.postId = this.form.postId.split(\",\");\r\n            }\r\n          });\r\n        }\r\n        this.initFlag = true;\r\n        done();\r\n      },\r\n      currentChange(currentPage) {\r\n        this.page.currentPage = currentPage;\r\n      },\r\n      sizeChange(pageSize) {\r\n        this.page.pageSize = pageSize;\r\n      },\r\n      refreshChange() {\r\n        this.onLoad(this.page, this.query);\r\n      },\r\n      onLoad(page, params = {}) {\r\n        this.loading = true;\r\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(res => {\r\n          const data = res.data.data;\r\n          this.page.total = data.total;\r\n          this.data = data.records;\r\n          this.loading = false;\r\n          this.selectionClear();\r\n        });\r\n      },\r\n      platformRowUpdate(row, index, done, loading) {\r\n        updatePlatform(row.id, row.userType, row.userExt).then(() => {\r\n          this.platformOnLoad(this.platformPage);\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"操作成功!\"\r\n          });\r\n          done();\r\n        }, error => {\r\n          window.console.log(error);\r\n          loading();\r\n        });\r\n      },\r\n      platformBeforeOpen(done, type) {\r\n        if ([\"edit\", \"view\"].includes(type)) {\r\n          getUserPlatform(this.platformForm.id).then(res => {\r\n            this.platformForm = res.data.data;\r\n          });\r\n        }\r\n        done();\r\n      },\r\n      platformSearchReset() {\r\n        this.platformQuery = {};\r\n        this.platformOnLoad(this.platformPage);\r\n      },\r\n      platformSearchChange(params, done) {\r\n        this.platformQuery = params;\r\n        this.platformPage.currentPage = 1;\r\n        this.platformOnLoad(this.platformPage, params);\r\n        done();\r\n      },\r\n      platformSelectionChange(list) {\r\n        this.platformSelectionList = list;\r\n      },\r\n      platformSelectionClear() {\r\n        this.platformSelectionList = [];\r\n        this.$refs.platformCrud.toggleSelection();\r\n      },\r\n      platformCurrentChange(currentPage) {\r\n        this.platformPage.currentPage = currentPage;\r\n      },\r\n      platformSizeChange(pageSize) {\r\n        this.platformPage.pageSize = pageSize;\r\n      },\r\n      platformRefreshChange() {\r\n        this.platformOnLoad(this.platformPage, this.platformQuery);\r\n      },\r\n      platformOnLoad(page, params = {}) {\r\n        this.platformLoading = true;\r\n        getList(page.currentPage, page.pageSize, Object.assign(params, this.query), this.treeDeptId).then(res => {\r\n          const data = res.data.data;\r\n          this.platformPage.total = data.total;\r\n          this.platformData = data.records;\r\n          this.platformLoading = false;\r\n          this.selectionClear();\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .box {\r\n    height: 800px;\r\n  }\r\n\r\n  .el-scrollbar {\r\n    height: 100%;\r\n  }\r\n\r\n  .box .el-scrollbar__wrap {\r\n    overflow: scroll;\r\n  }\r\n</style>\r\n"]}]}